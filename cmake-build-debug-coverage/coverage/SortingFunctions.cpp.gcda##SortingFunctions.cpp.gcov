        -:    0:Source:/home/sebifp/devStuff/repos/OOP-CPP/misc/SortingFunctions.cpp
        -:    0:Graph:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/misc/SortingFunctions.cpp.gcno
        -:    0:Data:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/misc/SortingFunctions.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <vector>
        -:    2:#include <algorithm>
        -:    3:#include "SortingFunctions.h"
        -:    4:#include "../domain/Car.h"
        -:    5:#include "DynamicArray.h"
        -:    6:
function _Z28sortCarsByRegistrationNumberSt6vectorI3CarSaIS0_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:    7:std::vector<Car> sortCarsByRegistrationNumber(std::vector<Car> cars, const std::string& sortingOrder) {
function _ZZ28sortCarsByRegistrationNumberSt6vectorI3CarSaIS0_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRKS0_SC_E_clESC_SC_ called 3 returned 100% blocks executed 58%
        5:    8:    std::sort(cars.begin(), cars.end(), [&](const Car& car1, const Car& car2){return sortingOrder == "ASC" ? car1.getRegistrationNumber() < car2.getRegistrationNumber() : car1.getRegistrationNumber() > car2.getRegistrationNumber();});
        2:    8-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        3:    8-block  1
call    3 returned 3
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        2:    8-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:    8-block  3
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
        2:    8-block  4
call   12 returned 2
        1:    8-block  5
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    8-block  6
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:    8-block  7
call   19 returned 1
        3:    8-block  8
branch 20 taken 1 (fallthrough)
branch 21 taken 2
        1:    8-block  9
call   22 returned 1
        3:    8-block 10
branch 23 taken 1 (fallthrough)
branch 24 taken 2
        1:    8-block 11
call   25 returned 1
        3:    8-block 12
branch 26 taken 2 (fallthrough)
branch 27 taken 1
        2:    8-block 13
call   28 returned 2
        3:    8-block 14
branch 29 taken 2 (fallthrough)
branch 30 taken 1
        2:    8-block 15
call   31 returned 2
        3:    8-block 16
        3:    8-block 17
    $$$$$:    8-block 18
branch 32 never executed
branch 33 never executed
    $$$$$:    8-block 19
call   34 never executed
    $$$$$:    8-block 20
    $$$$$:    8-block 21
branch 35 never executed
branch 36 never executed
    $$$$$:    8-block 22
call   37 never executed
    $$$$$:    8-block 23
    $$$$$:    8-block 24
branch 38 never executed
branch 39 never executed
    $$$$$:    8-block 25
call   40 never executed
    $$$$$:    8-block 26
    $$$$$:    8-block 27
branch 41 never executed
branch 42 never executed
    $$$$$:    8-block 28
call   43 never executed
        2:    9:    return cars;
call    0 returned 2
        -:   10:}
        -:   11:
function _Z14sortCarsByTypeSt6vectorI3CarSaIS0_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   12:std::vector<Car> sortCarsByType(std::vector<Car> cars, const std::string& sortingOrder) {
function _ZZ14sortCarsByTypeSt6vectorI3CarSaIS0_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRKS0_SC_E_clESC_SC_ called 1 returned 100% blocks executed 42%
       2*:   13:    std::sort(cars.begin(), cars.end(), [&](const Car& car1,const Car& car2){return sortingOrder == "ASC" ? car1.getType() < car2.getType() : car1.getType() > car2.getType();});
        1:   13-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   13-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   13-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   13-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   13-block  4
call   12 never executed
        1:   13-block  5
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   13-block  6
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:   13-block  7
call   19 returned 1
        1:   13-block  8
branch 20 taken 1 (fallthrough)
branch 21 taken 0
        1:   13-block  9
call   22 returned 1
        1:   13-block 10
branch 23 taken 1 (fallthrough)
branch 24 taken 0
        1:   13-block 11
call   25 returned 1
        1:   13-block 12
branch 26 taken 0 (fallthrough)
branch 27 taken 1
    %%%%%:   13-block 13
call   28 never executed
        1:   13-block 14
branch 29 taken 0 (fallthrough)
branch 30 taken 1
    %%%%%:   13-block 15
call   31 never executed
        1:   13-block 16
        1:   13-block 17
    $$$$$:   13-block 18
branch 32 never executed
branch 33 never executed
    $$$$$:   13-block 19
call   34 never executed
    $$$$$:   13-block 20
    $$$$$:   13-block 21
branch 35 never executed
branch 36 never executed
    $$$$$:   13-block 22
call   37 never executed
    $$$$$:   13-block 23
    $$$$$:   13-block 24
branch 38 never executed
branch 39 never executed
    $$$$$:   13-block 25
call   40 never executed
    $$$$$:   13-block 26
    $$$$$:   13-block 27
branch 41 never executed
branch 42 never executed
    $$$$$:   13-block 28
call   43 never executed
        1:   14:    return cars;
call    0 returned 1
        -:   15:}
        -:   16:
function _Z26sortCarsByProducerAndModelSt6vectorI3CarSaIS0_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   17:std::vector<Car> sortCarsByProducerAndModel(std::vector<Car> cars, const std::string& sortingOrder) {
function _ZZ26sortCarsByProducerAndModelSt6vectorI3CarSaIS0_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRKS0_SC_E_clESC_SC_ called 2 returned 100% blocks executed 100%
        3:   18:    std::sort(cars.begin(), cars.end(), [&](const Car &car1, const Car &car2) { return compareProducersAndModels(car1, car2, sortingOrder) == 1;});
        1:   18-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        2:   18-block  1
call    3 returned 2
        1:   19:    return cars;
call    0 returned 1
        -:   20:}
        -:   21:
function _Z26compareRegistrationNumbersRK3CarS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 69%
        5:   22:int compareRegistrationNumbers(const Car& firstCar,const Car& secondCar,const std::string& sortingOrder) {
        5:   23:    if (sortingOrder == "ASC") {
        5:   23-block  0
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
        4:   24:        if (firstCar.getRegistrationNumber() < secondCar.getRegistrationNumber()) {
        4:   24-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   24-block  1
call    4 returned 4
call    5 returned 4
call    6 returned 4
branch  7 taken 1 (fallthrough)
branch  8 taken 3
    $$$$$:   24-block  2
call    9 never executed
    $$$$$:   24-block  3
call   10 never executed
        1:   25:            return 1;
        1:   25-block  0
        3:   26:        } else if (firstCar.getRegistrationNumber() > secondCar.getRegistrationNumber()) {
        3:   26-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   26-block  1
call    4 returned 3
call    5 returned 3
call    6 returned 3
branch  7 taken 2 (fallthrough)
branch  8 taken 1
    $$$$$:   26-block  2
call    9 never executed
    $$$$$:   26-block  3
call   10 never executed
        2:   27:            return -1;
        2:   27-block  0
        -:   28:        } else {
        1:   29:            return 0;
        1:   29-block  0
        -:   30:        }
        -:   31:    } else {
        1:   32:        return compareRegistrationNumbers(firstCar, secondCar, "ASC") * -1;
        1:   32-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   32-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   32-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:   32-block  3
call    9 never executed
    $$$$$:   32-block  4
    $$$$$:   32-block  5
call   10 never executed
        -:   33:    }
        -:   34:}
        -:   35:
function _Z12compareTypesR3CarS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 69%
        5:   36:int compareTypes(Car& firstCar, Car& secondCar, const std::string& sortingOrder) {
        5:   37:    if (sortingOrder == "ASC") {
        5:   37-block  0
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
        4:   38:        if (firstCar.getType() < secondCar.getType()) {
        4:   38-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   38-block  1
call    4 returned 4
call    5 returned 4
call    6 returned 4
branch  7 taken 1 (fallthrough)
branch  8 taken 3
    $$$$$:   38-block  2
call    9 never executed
    $$$$$:   38-block  3
call   10 never executed
        1:   39:            return 1;
        1:   39-block  0
        3:   40:        } else if (firstCar.getType() > secondCar.getType()) {
        3:   40-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   40-block  1
call    4 returned 3
call    5 returned 3
call    6 returned 3
branch  7 taken 2 (fallthrough)
branch  8 taken 1
    $$$$$:   40-block  2
call    9 never executed
    $$$$$:   40-block  3
call   10 never executed
        2:   41:            return -1;
        2:   41-block  0
        -:   42:        } else {
        1:   43:            return 0;
        1:   43-block  0
        -:   44:        }
        -:   45:    } else {
        1:   46:        return compareTypes(firstCar, secondCar, "ASC") * -1;
        1:   46-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   46-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   46-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:   46-block  3
call    9 never executed
    $$$$$:   46-block  4
    $$$$$:   46-block  5
call   10 never executed
        -:   47:    }
        -:   48:}
        -:   49:
function _Z25compareProducersAndModelsRK3CarS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 70%
       11:   50:int compareProducersAndModels(const Car& firstCar,const Car& secondCar,const std::string& sortingOrder) {
       11:   51:    if (sortingOrder == "ASC") {
       11:   51-block  0
call    0 returned 11
branch  1 taken 8 (fallthrough)
branch  2 taken 3
        8:   52:        if (firstCar.getProducer() < secondCar.getProducer()) {
        8:   52-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:   52-block  1
call    4 returned 8
call    5 returned 8
call    6 returned 8
branch  7 taken 2 (fallthrough)
branch  8 taken 6
    $$$$$:   52-block  2
call    9 never executed
    $$$$$:   52-block  3
call   10 never executed
        2:   53:            return 1;
        2:   53-block  0
        6:   54:        } else if (firstCar.getProducer() > secondCar.getProducer()) {
        6:   54-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:   54-block  1
call    4 returned 6
call    5 returned 6
call    6 returned 6
branch  7 taken 2 (fallthrough)
branch  8 taken 4
    $$$$$:   54-block  2
call    9 never executed
    $$$$$:   54-block  3
call   10 never executed
        2:   55:            return -1;
        2:   55-block  0
        -:   56:        } else {
        4:   57:            if (firstCar.getModel() < secondCar.getModel()) {
        4:   57-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   57-block  1
call    4 returned 4
call    5 returned 4
call    6 returned 4
branch  7 taken 1 (fallthrough)
branch  8 taken 3
    $$$$$:   57-block  2
call    9 never executed
    $$$$$:   57-block  3
call   10 never executed
        1:   58:                return 1;
        1:   58-block  0
        3:   59:            } else if (firstCar.getModel() > secondCar.getModel()) {
        3:   59-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   59-block  1
call    4 returned 3
call    5 returned 3
call    6 returned 3
branch  7 taken 2 (fallthrough)
branch  8 taken 1
    $$$$$:   59-block  2
call    9 never executed
    $$$$$:   59-block  3
call   10 never executed
        2:   60:                return -1;
        2:   60-block  0
        -:   61:            } else {
        1:   62:                return 0;
        1:   62-block  0
        -:   63:            }
        -:   64:        }
        -:   65:    } else {
        3:   66:        return compareProducersAndModels(firstCar, secondCar, "ASC") * -1;
        3:   66-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   66-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:   66-block  2
call    7 returned 3
call    8 returned 3
    $$$$$:   66-block  3
call    9 never executed
    $$$$$:   66-block  4
    $$$$$:   66-block  5
call   10 never executed
        -:   67:    }
        -:   68:}
        -:   69:
