        -:    0:Source:/home/sebifp/ubb/cpplab/test/DynamicArrayTests.cpp
        -:    0:Graph:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/DynamicArrayTests.cpp.gcno
        -:    0:Data:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/DynamicArrayTests.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <cassert>
        -:    2:#include <iostream>
        -:    3:#include "DynamicArrayTests.h"
        -:    4:#include "../domain/Car.h"
        -:    5:#include "../misc/DynamicArray.h"
        -:    6:
function _ZN17DynamicArrayTests16testDynamicArrayEv called 1 returned 100% blocks executed 56%
        1:    7:void DynamicArrayTests::testDynamicArray() {
        -:    8:    // Arrange
        2:    9:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:    9-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    9-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    9-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    9-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    9-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:    9-block  5
    $$$$$:    9-block  6
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    $$$$$:    9-block  9
    $$$$$:    9-block 10
    $$$$$:    9-block 11
    $$$$$:    9-block 12
        2:   10:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   10-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   10-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   10-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   10-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   10-block  4
    $$$$$:   10-block  5
    $$$$$:   10-block  6
    $$$$$:   10-block  7
    $$$$$:   10-block  8
    $$$$$:   10-block  9
    $$$$$:   10-block 10
    $$$$$:   10-block 11
        2:   11:    Car car3 = Car("RO123GG", "Mercedes", "A45", "Regular");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   11-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   11-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   11-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   11-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   11-block  4
    $$$$$:   11-block  5
    $$$$$:   11-block  6
    $$$$$:   11-block  7
    $$$$$:   11-block  8
    $$$$$:   11-block  9
    $$$$$:   11-block 10
    $$$$$:   11-block 11
        1:   12:    DynamicArray<Car> cars;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   13:
        -:   14:    // Act
        1:   15:    cars.add(car1);
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:    int actual1 = cars.size();
        1:   16-block  0
call    0 returned 1
        -:   17:
        -:   18:    // Assert
       1*:   19:    assert(actual1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  0
call    2 never executed
       1*:   20:    assert(cars.get(0).getRegistrationNumber() == car1.getRegistrationNumber());
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   20-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   20-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   20-block  3
call   10 never executed
        1:   20-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:   20-block  5
call   13 never executed
    $$$$$:   20-block  6
        -:   21:
        -:   22:    // Act
        1:   23:    cars.erase(0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:    int actual2 = cars.size();
        1:   24-block  0
call    0 returned 1
        -:   25:
        -:   26:    // Assert
       1*:   27:    assert(actual2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   27-block  0
call    2 never executed
        -:   28:
        -:   29:    // Act
        1:   30:    cars.add(car1);
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31:    cars.add(car2);
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32:    cars.add(car3);
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33:    Car actual3 = cars.get(1);
        1:   33-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:   34:
        -:   35:    // Assert
       1*:   36:    assert(actual3.getRegistrationNumber() == car2.getRegistrationNumber());
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   36-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   36-block  3
call    9 never executed
        1:   36-block  4
call   10 returned 1
call   11 returned 1
    $$$$$:   36-block  5
call   12 never executed
    $$$$$:   36-block  6
        -:   37:
        -:   38:    // Act
        1:   39:    DynamicArray<Car> cars1;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:   40:    for (auto car: cars) {
        1:   40-block  0
call    0 returned 1
call    1 returned 1
        3:   40-block  1
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   40-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 3
branch  9 taken 3 (fallthrough)
branch 10 taken 0 (throw)
        4:   40-block  3
call   11 returned 4
branch 12 taken 3
branch 13 taken 1 (fallthrough)
        3:   41:        cars1.add(car);
        3:   41-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   42:    }
        3:   42-block  0
call    0 returned 3
    $$$$$:   42-block  1
call    1 never executed
        -:   43:
        -:   44:    // Assert
       1*:   45:    assert(cars1.size() == 3);
        1:   45-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   45-block  1
call    3 never executed
       1*:   46:    assert(cars1.get(0).getRegistrationNumber() == cars.get(0).getRegistrationNumber());
        1:   46-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   46-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   46-block  2
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:   46-block  3
call   11 never executed
        1:   46-block  4
call   12 returned 1
call   13 returned 1
    $$$$$:   46-block  5
call   14 never executed
    $$$$$:   46-block  6
       1*:   47:    assert(cars1.get(1).getRegistrationNumber() == cars.get(1).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   47-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   47-block  1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:   47-block  2
call   11 never executed
        1:   47-block  3
call   12 returned 1
call   13 returned 1
    $$$$$:   47-block  4
call   14 never executed
    $$$$$:   47-block  5
       1*:   48:    assert(cars1.get(2).getRegistrationNumber() == cars.get(2).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   48-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   48-block  1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:   48-block  2
call   11 never executed
        1:   48-block  3
call   12 returned 1
call   13 returned 1
    $$$$$:   48-block  4
call   14 never executed
    $$$$$:   48-block  5
        -:   49:
        -:   50:    // Act
        4:   51:    for (int i = 0; i < cars.size(); ++i) {
        3:   51-block  0
        4:   51-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:   52:        cars.set(i, car1);
        3:   52-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:    }
        -:   54:
        -:   55:    // Assert
       1*:   56:    assert(car1.getRegistrationNumber() == cars.get(0).getRegistrationNumber());
        1:   56-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   56-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   56-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   56-block  3
call   10 never executed
        1:   56-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:   56-block  5
call   13 never executed
    $$$$$:   56-block  6
       1*:   57:    assert(car1.getRegistrationNumber() == cars.get(1).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   57-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   57-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   57-block  2
call   10 never executed
        1:   57-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   57-block  4
call   13 never executed
    $$$$$:   57-block  5
       1*:   58:    assert(car1.getRegistrationNumber() == cars.get(2).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   58-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   58-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   58-block  2
call   10 never executed
        1:   58-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   58-block  4
call   13 never executed
    $$$$$:   58-block  5
        -:   59:
        -:   60:    // Act
        1:   61:    cars1 = cars;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   62:
        -:   63:    // Assert
       1*:   64:    assert(car1.getRegistrationNumber() == cars1.get(0).getRegistrationNumber());
        1:   64-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   64-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   64-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   64-block  3
call   10 never executed
        1:   64-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:   64-block  5
call   13 never executed
    $$$$$:   64-block  6
       1*:   65:    assert(car1.getRegistrationNumber() == cars1.get(1).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   65-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   65-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   65-block  2
call   10 never executed
        1:   65-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   65-block  4
call   13 never executed
    $$$$$:   65-block  5
       1*:   66:    assert(car1.getRegistrationNumber() == cars1.get(2).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   66-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   66-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   66-block  2
call   10 never executed
        1:   66-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   66-block  4
call   13 never executed
    $$$$$:   66-block  5
        -:   67:
        -:   68:    // Act
        1:   69:    cars.erase(0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   70:    cars.erase(0);
        1:   70-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   71:
        -:   72:    // Assert
       1*:   73:    assert(cars.size() == 1);
        1:   73-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   73-block  1
call    3 never executed
        1:   74:}
        1:   74-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
    $$$$$:   74-block  1
call    6 never executed
    $$$$$:   74-block  2
call    7 never executed
    $$$$$:   74-block  3
call    8 never executed
    $$$$$:   74-block  4
call    9 never executed
    $$$$$:   74-block  5
call   10 never executed
    $$$$$:   74-block  6
call   11 never executed
