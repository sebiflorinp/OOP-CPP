        -:    0:Source:/home/sebifp/ubb/cpplab/test/DynamicArrayTests.cpp
        -:    0:Graph:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/DynamicArrayTests.cpp.gcno
        -:    0:Data:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/DynamicArrayTests.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <cassert>
        -:    2:#include "DynamicArrayTests.h"
        -:    3:#include "../domain/Car.h"
        -:    4:#include "../misc/DynamicArray.h"
        -:    5:
function _ZN17DynamicArrayTests16testDynamicArrayEv called 1 returned 100% blocks executed 56%
        1:    6:void DynamicArrayTests::testDynamicArray() {
        -:    7:    // Arrange
        2:    8:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:    8-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    8-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    8-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    8-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    8-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:    8-block  5
    $$$$$:    8-block  6
    $$$$$:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
    $$$$$:    8-block 10
    $$$$$:    8-block 11
    $$$$$:    8-block 12
        2:    9:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    9-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    9-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    9-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    9-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:    9-block  4
    $$$$$:    9-block  5
    $$$$$:    9-block  6
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    $$$$$:    9-block  9
    $$$$$:    9-block 10
    $$$$$:    9-block 11
        2:   10:    Car car3 = Car("RO123GG", "Mercedes", "A45", "Regular");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   10-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   10-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   10-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   10-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   10-block  4
    $$$$$:   10-block  5
    $$$$$:   10-block  6
    $$$$$:   10-block  7
    $$$$$:   10-block  8
    $$$$$:   10-block  9
    $$$$$:   10-block 10
    $$$$$:   10-block 11
        1:   11:    DynamicArray<Car> cars;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   12:
        -:   13:    // Act
        1:   14:    cars.add(car1);
        1:   14-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   15:    int actual1 = cars.size();
        1:   15-block  0
call    0 returned 1
        -:   16:
        -:   17:    // Assert
       1*:   18:    assert(actual1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  0
call    2 never executed
       1*:   19:    assert(cars.get(0).getRegistrationNumber() == car1.getRegistrationNumber());
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   19-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   19-block  3
call   10 never executed
        1:   19-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:   19-block  5
call   13 never executed
    $$$$$:   19-block  6
        -:   20:
        -:   21:    // Act
        1:   22:    cars.erase(0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23:    int actual2 = cars.size();
        1:   23-block  0
call    0 returned 1
        -:   24:
        -:   25:    // Assert
       1*:   26:    assert(actual2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  0
call    2 never executed
        -:   27:
        -:   28:    // Act
        1:   29:    cars.add(car1);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30:    cars.add(car2);
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31:    cars.add(car3);
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32:    Car actual3 = cars.get(1);
        1:   32-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:   33:
        -:   34:    // Assert
       1*:   35:    assert(actual3.getRegistrationNumber() == car2.getRegistrationNumber());
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   35-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   35-block  3
call    9 never executed
        1:   35-block  4
call   10 returned 1
call   11 returned 1
    $$$$$:   35-block  5
call   12 never executed
    $$$$$:   35-block  6
        -:   36:
        -:   37:    // Act
        1:   38:    DynamicArray<Car> cars1;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:   39:    for (auto car: cars) {
        1:   39-block  0
call    0 returned 1
call    1 returned 1
        3:   39-block  1
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   39-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 3
branch  9 taken 3 (fallthrough)
branch 10 taken 0 (throw)
        4:   39-block  3
call   11 returned 4
branch 12 taken 3
branch 13 taken 1 (fallthrough)
        3:   40:        cars1.add(car);
        3:   40-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   41:    }
        3:   41-block  0
call    0 returned 3
    $$$$$:   41-block  1
call    1 never executed
        -:   42:
        -:   43:    // Assert
       1*:   44:    assert(cars1.size() == 3);
        1:   44-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   44-block  1
call    3 never executed
       1*:   45:    assert(cars1.get(0).getRegistrationNumber() == cars.get(0).getRegistrationNumber());
        1:   45-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   45-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   45-block  2
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:   45-block  3
call   11 never executed
        1:   45-block  4
call   12 returned 1
call   13 returned 1
    $$$$$:   45-block  5
call   14 never executed
    $$$$$:   45-block  6
       1*:   46:    assert(cars1.get(1).getRegistrationNumber() == cars.get(1).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   46-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   46-block  1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:   46-block  2
call   11 never executed
        1:   46-block  3
call   12 returned 1
call   13 returned 1
    $$$$$:   46-block  4
call   14 never executed
    $$$$$:   46-block  5
       1*:   47:    assert(cars1.get(2).getRegistrationNumber() == cars.get(2).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   47-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   47-block  1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:   47-block  2
call   11 never executed
        1:   47-block  3
call   12 returned 1
call   13 returned 1
    $$$$$:   47-block  4
call   14 never executed
    $$$$$:   47-block  5
        -:   48:
        -:   49:    // Act
        4:   50:    for (int i = 0; i < cars.size(); ++i) {
        3:   50-block  0
        4:   50-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:   51:        cars.set(i, car1);
        3:   51-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   52:    }
        -:   53:
        -:   54:    // Assert
       1*:   55:    assert(car1.getRegistrationNumber() == cars.get(0).getRegistrationNumber());
        1:   55-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   55-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   55-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   55-block  3
call   10 never executed
        1:   55-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:   55-block  5
call   13 never executed
    $$$$$:   55-block  6
       1*:   56:    assert(car1.getRegistrationNumber() == cars.get(1).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   56-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   56-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   56-block  2
call   10 never executed
        1:   56-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   56-block  4
call   13 never executed
    $$$$$:   56-block  5
       1*:   57:    assert(car1.getRegistrationNumber() == cars.get(2).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   57-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   57-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   57-block  2
call   10 never executed
        1:   57-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   57-block  4
call   13 never executed
    $$$$$:   57-block  5
        -:   58:
        -:   59:    // Act
        1:   60:    cars1 = cars;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   61:
        -:   62:    // Assert
       1*:   63:    assert(car1.getRegistrationNumber() == cars1.get(0).getRegistrationNumber());
        1:   63-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   63-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   63-block  2
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   63-block  3
call   10 never executed
        1:   63-block  4
call   11 returned 1
call   12 returned 1
    $$$$$:   63-block  5
call   13 never executed
    $$$$$:   63-block  6
       1*:   64:    assert(car1.getRegistrationNumber() == cars1.get(1).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   64-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   64-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   64-block  2
call   10 never executed
        1:   64-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   64-block  4
call   13 never executed
    $$$$$:   64-block  5
       1*:   65:    assert(car1.getRegistrationNumber() == cars1.get(2).getRegistrationNumber());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   65-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   65-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   65-block  2
call   10 never executed
        1:   65-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:   65-block  4
call   13 never executed
    $$$$$:   65-block  5
        1:   66:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
    $$$$$:   66-block  0
call    6 never executed
    $$$$$:   66-block  1
call    7 never executed
    $$$$$:   66-block  2
call    8 never executed
    $$$$$:   66-block  3
call    9 never executed
    $$$$$:   66-block  4
call   10 never executed
    $$$$$:   66-block  5
call   11 never executed
