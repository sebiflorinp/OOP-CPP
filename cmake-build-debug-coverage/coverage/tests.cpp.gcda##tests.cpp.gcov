        -:    0:Source:/home/sebifp/devStuff/repos/OOP-CPP/test/tests.cpp
        -:    0:Graph:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/tests.cpp.gcno
        -:    0:Data:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "tests.h"
        -:    2:#include "CarValidatorsTests.h"
        -:    3:#include "CarTests.h"
        -:    4:#include "CarRepositoryTests.h"
        -:    5:#include "CarControllerTests.h"
        -:    6:#include "../misc/DynamicArray.h"
        -:    7:#include "FiltersTests.h"
        -:    8:#include "SortingFunctionsTests.h"
        -:    9:#include "DynamicArrayTests.h"
        -:   10:#include "GenericExceptionTests.h"
        -:   11:#include "CarsToWashControllerTests.h"
        -:   12:#include "TypeDTOTests.h"
        -:   13:#include "UndoTests.h"
        -:   14:
        -:   15:void testAll();
        -:   16:
function _Z11runAllTestsv called 1 returned 100% blocks executed 100%
        1:   17:void runAllTests() {
        -:   18:    // car validators tests
        -:   19:    CarValidatorsTests carValidatorsTests = CarValidatorsTests();
        1:   20:    carValidatorsTests.testValidateRegistrationNumber();
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   21:    carValidatorsTests.testValidateType();
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22:    carValidatorsTests.testValidateModel();
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23:    carValidatorsTests.testValidateProducer();
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   24:
        -:   25:    // car constructor, setters and getters tests
        -:   26:    CarTests carTests = CarTests();
        1:   27:    carTests.testConstructor();
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28:    carTests.testGetters();
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29:    carTests.testSetters();
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30:    carTests.testEquality();
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   31:
        -:   32:    // car repository tests
        -:   33:    CarRepositoryTests carRepositoryTests = CarRepositoryTests();
        1:   34:    carRepositoryTests.testAddNewCar();
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35:    carRepositoryTests.testDeleteCarByRegistrationNumber();
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36:    carRepositoryTests.testGetCarByRegistrationNumber();
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37:    carRepositoryTests.testUpdateCarByRegistrationNumber();
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38:    carRepositoryTests.testGetAllCars();
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   39:
        -:   40:    // car controller tests
        -:   41:    CarControllerTests carControllerTests = CarControllerTests();
        1:   42:    carControllerTests.testAddCar();
        1:   42-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43:    carControllerTests.testFindCarByRegistrationNumber();
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   44:    carControllerTests.testGetAllCars();
        1:   44-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45:    carControllerTests.testUpdateCarByRegistrationNumber();
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46:    carControllerTests.testDeleteCarByRegistrationNumber();
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47:    carControllerTests.testFilter();
        1:   47-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48:    carControllerTests.testSort();
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49:    carControllerTests.testCreateTypeReport();
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50:    carControllerTests.testCreateTypeReport();
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51:    carControllerTests.testLoadData();
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52:    carControllerTests.testSaveData();
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:
        -:   54:    // Filters tests
        -:   55:    FiltersTests filtersTests = FiltersTests();
        1:   56:    filtersTests.testFilterByProducer();
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    filtersTests.testFilterByType();
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   58:
        -:   59:    // SortingFunctions tests
        -:   60:    SortingFunctionsTests sortingFunctionsTests = SortingFunctionsTests();
        1:   61:    sortingFunctionsTests.testCompareTypes();
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62:    sortingFunctionsTests.testCompareRegistrationNumbers();
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   63:    sortingFunctionsTests.testCompareProducersAndModels();
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64:    sortingFunctionsTests.testSortCarsByType();
        1:   64-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   65:    sortingFunctionsTests.testSortCarsByRegistrationNumber();
        1:   65-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66:    sortingFunctionsTests.testSortCarsByProducerAndModel();
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   67:
        -:   68:    // DynamicArray tests
        -:   69:    DynamicArrayTests dynamicArrayTests = DynamicArrayTests();
        1:   70:    dynamicArrayTests.testDynamicArray();
        1:   70-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   71:
        -:   72:    // GenericException tests
        -:   73:    GenericExceptionTests genericExceptionTests = GenericExceptionTests();
        1:   74:    genericExceptionTests.testGetErrorMessage();
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   75:
        -:   76:    // CarsToWashController tests
        -:   77:    CarsToWashControllerTests carsToWashControllerTests = CarsToWashControllerTests();
        1:   78:    carsToWashControllerTests.TestGetAllCars();
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   79:    carsToWashControllerTests.TestAddCarToWashRepository();
        1:   79-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   80:    carsToWashControllerTests.TestEmptyRepository();
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81:    carsToWashControllerTests.TestAddRandomCars();
        1:   81-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82:    carsToWashControllerTests.TestExportCarsToWash();
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   83:
        -:   84:    // TypeDTO tests
        -:   85:    TypeDTOTests typeDTOTests = TypeDTOTests();
        1:   86:    typeDTOTests.testTypeDTO();
        1:   86-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   87:
        -:   88:    // Undo tests
        -:   89:    UndoTests undoTests = UndoTests();
        1:   90:    undoTests.testUndo();
        1:   90-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   91:    undoTests.testUndoAdd();
        1:   91-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   92:    undoTests.testUndoDelete();
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93:    undoTests.testUndoUpdate();
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   94:}
        1:   94-block  0
        -:   95:
        -:   96:
        -:   97:
