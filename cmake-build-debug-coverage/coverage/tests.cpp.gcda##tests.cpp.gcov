        -:    0:Source:/home/sebifp/ubb/cpplab/test/tests.cpp
        -:    0:Graph:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/tests.cpp.gcno
        -:    0:Data:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "tests.h"
        -:    2:#include "CarValidatorsTests.h"
        -:    3:#include "CarTests.h"
        -:    4:#include "CarRepositoryTests.h"
        -:    5:#include "CarControllerTests.h"
        -:    6:#include "../misc/DynamicArray.h"
        -:    7:#include "FiltersTests.h"
        -:    8:#include "SortingFunctionsTests.h"
        -:    9:
        -:   10:void testAll();
        -:   11:
function _Z11runAllTestsv called 1 returned 100% blocks executed 100%
        1:   12:void runAllTests() {
        -:   13:    // car validators tests
        -:   14:    CarValidatorsTests carValidatorsTests = CarValidatorsTests();
        1:   15:    carValidatorsTests.testValidateRegistrationNumber();
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:    carValidatorsTests.testValidateType();
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17:    carValidatorsTests.testValidateModel();
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18:    carValidatorsTests.testValidateProducer();
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   19:
        -:   20:    // car constructor, setters and getters tests
        -:   21:    CarTests carTests = CarTests();
        1:   22:    carTests.testConstructor();
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23:    carTests.testGetters();
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:    carTests.testSetters();
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25:    carTests.testEquality();
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   26:
        -:   27:    // car repository tests
        -:   28:    CarRepositoryTests carRepositoryTests = CarRepositoryTests();
        1:   29:    carRepositoryTests.testAddNewCar();
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30:    carRepositoryTests.testDeleteCarByRegistrationNumber();
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31:    carRepositoryTests.testGetCarByRegistrationNumber();
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32:    carRepositoryTests.testUpdateCarByRegistrationNumber();
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33:    carRepositoryTests.testGetAllCars();
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   34:
        -:   35:    // car controller tests
        -:   36:    CarControllerTests carControllerTests = CarControllerTests();
        1:   37:    carControllerTests.testAddCar();
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38:    carControllerTests.testFindCarByRegistrationNumber();
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39:    carControllerTests.testGetAllCars();
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40:    carControllerTests.testUpdateCarByRegistrationNumber();
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41:    carControllerTests.testDeleteCarByRegistrationNumber();
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   42:
        -:   43:    // Filters tests
        -:   44:    FiltersTests filtersTests = FiltersTests();
        1:   45:    filtersTests.testFilterByProducer();
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46:    filtersTests.testFilterByType();
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   47:
        -:   48:    // SortingFunctions tests
        -:   49:    SortingFunctionsTests sortingFunctionsTests = SortingFunctionsTests();
        1:   50:    sortingFunctionsTests.testCompareTypes();
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51:    sortingFunctionsTests.testCompareRegistrationNumbers();
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52:    sortingFunctionsTests.testCompareProducersAndModels();
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   53:    sortingFunctionsTests.testSortCarsByType();
        1:   53-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   54:    sortingFunctionsTests.testSortCarsByRegistrationNumber();
        1:   54-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   55:    sortingFunctionsTests.testSortCarsByProducerAndModel();
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   56:}
        1:   56-block  0
        -:   57:
        -:   58:
        -:   59:
