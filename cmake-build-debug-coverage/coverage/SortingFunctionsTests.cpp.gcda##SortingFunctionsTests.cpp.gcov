        -:    0:Source:/home/sebifp/ubb/cpplab/test/SortingFunctionsTests.cpp
        -:    0:Graph:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/SortingFunctionsTests.cpp.gcno
        -:    0:Data:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/SortingFunctionsTests.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <string>
        -:    2:#include <cassert>
        -:    3:#include "SortingFunctionsTests.h"
        -:    4:#include "../misc/SortingFunctions.h"
        -:    5:
function _ZN21SortingFunctionsTests16testCompareTypesEv called 1 returned 100% blocks executed 44%
        1:    6:void SortingFunctionsTests::testCompareTypes() {
        -:    7:    // Arrange
        2:    8:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:    8-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    8-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    8-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    8-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    8-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:    8-block  5
    $$$$$:    8-block  6
    $$$$$:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
    $$$$$:    8-block 10
    $$$$$:    8-block 11
    $$$$$:    8-block 12
        2:    9:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    9-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    9-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    9-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    9-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:    9-block  4
    $$$$$:    9-block  5
    $$$$$:    9-block  6
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    $$$$$:    9-block  9
    $$$$$:    9-block 10
    $$$$$:    9-block 11
        -:   10:
        -:   11:    // Act
        1:   12:    int actual1 = compareTypes(car1, car2, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   12-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   12-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   12-block  2
call    9 never executed
    $$$$$:   12-block  3
    $$$$$:   12-block  4
call   10 never executed
    $$$$$:   12-block  5
        1:   13:    int actual2 = compareTypes(car2, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   13-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   13-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   13-block  2
call    9 never executed
    $$$$$:   13-block  3
    $$$$$:   13-block  4
call   10 never executed
    $$$$$:   13-block  5
        1:   14:    int actual3 = compareTypes(car1, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   14-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   14-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   14-block  2
call    9 never executed
    $$$$$:   14-block  3
    $$$$$:   14-block  4
call   10 never executed
    $$$$$:   14-block  5
        1:   15:    int actual4 = compareTypes(car2, car1, "DESC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   15-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   15-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   15-block  2
call    9 never executed
    $$$$$:   15-block  3
    $$$$$:   15-block  4
call   10 never executed
    $$$$$:   15-block  5
        -:   16:
        -:   17:    // Assert
       1*:   18:    assert(actual1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  0
call    2 never executed
       1*:   19:    assert(actual2 == -1);
        1:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  1
call    2 never executed
       1*:   20:    assert(actual3 == 0);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
       1*:   21:    assert(actual4 == 1);
        1:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   21-block  1
call    2 never executed
        1:   22:}
        1:   22-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   22-block  1
call    2 never executed
    $$$$$:   22-block  2
call    3 never executed
        -:   23:
function _ZN21SortingFunctionsTests30testCompareRegistrationNumbersEv called 1 returned 100% blocks executed 44%
        1:   24:void SortingFunctionsTests::testCompareRegistrationNumbers() {
        -:   25:    // Arrange
        2:   26:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:   26-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   26-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   26-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   26-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   26-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   26-block  5
    $$$$$:   26-block  6
    $$$$$:   26-block  7
    $$$$$:   26-block  8
    $$$$$:   26-block  9
    $$$$$:   26-block 10
    $$$$$:   26-block 11
    $$$$$:   26-block 12
        2:   27:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   27-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   27-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   27-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   27-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   27-block  4
    $$$$$:   27-block  5
    $$$$$:   27-block  6
    $$$$$:   27-block  7
    $$$$$:   27-block  8
    $$$$$:   27-block  9
    $$$$$:   27-block 10
    $$$$$:   27-block 11
        -:   28:
        -:   29:    // Act
        1:   30:    int actual1 = compareRegistrationNumbers(car1, car2, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   30-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   30-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   30-block  2
call    9 never executed
    $$$$$:   30-block  3
    $$$$$:   30-block  4
call   10 never executed
    $$$$$:   30-block  5
        1:   31:    int actual2 = compareRegistrationNumbers(car2, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   31-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   31-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   31-block  2
call    9 never executed
    $$$$$:   31-block  3
    $$$$$:   31-block  4
call   10 never executed
    $$$$$:   31-block  5
        1:   32:    int actual3 = compareRegistrationNumbers(car1, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   32-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   32-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   32-block  2
call    9 never executed
    $$$$$:   32-block  3
    $$$$$:   32-block  4
call   10 never executed
    $$$$$:   32-block  5
        1:   33:    int actual4 = compareRegistrationNumbers(car2, car1, "DESC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   33-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   33-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   33-block  2
call    9 never executed
    $$$$$:   33-block  3
    $$$$$:   33-block  4
call   10 never executed
    $$$$$:   33-block  5
        -:   34:
        -:   35:    // Assert
       1*:   36:    assert(actual1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   36-block  0
call    2 never executed
       1*:   37:    assert(actual2 == -1);
        1:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   37-block  1
call    2 never executed
       1*:   38:    assert(actual3 == 0);
        1:   38-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  1
call    2 never executed
       1*:   39:    assert(actual4 == 1);
        1:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   39-block  1
call    2 never executed
        1:   40:}
        1:   40-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   40-block  1
call    2 never executed
    $$$$$:   40-block  2
call    3 never executed
        -:   41:
function _ZN21SortingFunctionsTests29testCompareProducersAndModelsEv called 1 returned 100% blocks executed 43%
        1:   42:void SortingFunctionsTests::testCompareProducersAndModels() {
        -:   43:    // Arrange
        2:   44:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:   44-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   44-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   44-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   44-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   44-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   44-block  5
    $$$$$:   44-block  6
    $$$$$:   44-block  7
    $$$$$:   44-block  8
    $$$$$:   44-block  9
    $$$$$:   44-block 10
    $$$$$:   44-block 11
    $$$$$:   44-block 12
        2:   45:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   45-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   45-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   45-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   45-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   45-block  4
    $$$$$:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
    $$$$$:   45-block  8
    $$$$$:   45-block  9
    $$$$$:   45-block 10
    $$$$$:   45-block 11
        2:   46:    Car car3 = Car("RO123GG", "Mercedes", "A45", "Regular");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   46-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   46-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   46-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   46-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   46-block  4
    $$$$$:   46-block  5
    $$$$$:   46-block  6
    $$$$$:   46-block  7
    $$$$$:   46-block  8
    $$$$$:   46-block  9
    $$$$$:   46-block 10
    $$$$$:   46-block 11
        -:   47:
        -:   48:    // Act
        1:   49:    int actual1 = compareProducersAndModels(car1, car3, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   49-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   49-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   49-block  2
call    9 never executed
    $$$$$:   49-block  3
    $$$$$:   49-block  4
call   10 never executed
    $$$$$:   49-block  5
        1:   50:    int actual2 = compareProducersAndModels(car3, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   50-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   50-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   50-block  2
call    9 never executed
    $$$$$:   50-block  3
    $$$$$:   50-block  4
call   10 never executed
    $$$$$:   50-block  5
        1:   51:    int actual3 = compareProducersAndModels(car1, car2, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   51-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   51-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   51-block  2
call    9 never executed
    $$$$$:   51-block  3
    $$$$$:   51-block  4
call   10 never executed
    $$$$$:   51-block  5
        1:   52:    int actual4 = compareProducersAndModels(car2, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   52-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   52-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   52-block  2
call    9 never executed
    $$$$$:   52-block  3
    $$$$$:   52-block  4
call   10 never executed
    $$$$$:   52-block  5
        1:   53:    int actual5 = compareProducersAndModels(car1, car1, "ASC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   53-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   53-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   53-block  2
call    9 never executed
    $$$$$:   53-block  3
    $$$$$:   53-block  4
call   10 never executed
    $$$$$:   53-block  5
        1:   54:    int actual6 = compareProducersAndModels(car1, car3, "DESC");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   54-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   54-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   54-block  2
call    9 never executed
    $$$$$:   54-block  3
    $$$$$:   54-block  4
call   10 never executed
    $$$$$:   54-block  5
        -:   55:
        -:   56:    // Assert
       1*:   57:    assert(actual1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  0
call    2 never executed
       1*:   58:    assert(actual2 == -1);
        1:   58-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  1
call    2 never executed
       1*:   59:    assert(actual3 == 1);
        1:   59-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   59-block  1
call    2 never executed
       1*:   60:    assert(actual4 == -1);
        1:   60-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   60-block  1
call    2 never executed
       1*:   61:    assert(actual5 == 0);
        1:   61-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   61-block  1
call    2 never executed
       1*:   62:    assert(actual6 == -1);
        1:   62-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   62-block  1
call    2 never executed
        1:   63:}
        1:   63-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:   63-block  1
call    3 never executed
    $$$$$:   63-block  2
call    4 never executed
    $$$$$:   63-block  3
call    5 never executed
        -:   64:
function _ZN21SortingFunctionsTests18testSortCarsByTypeEv called 1 returned 100% blocks executed 47%
        1:   65:void SortingFunctionsTests::testSortCarsByType() {
        -:   66:    // Arrange
        2:   67:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:   67-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   67-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   67-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   67-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   67-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   67-block  5
    $$$$$:   67-block  6
    $$$$$:   67-block  7
    $$$$$:   67-block  8
    $$$$$:   67-block  9
    $$$$$:   67-block 10
    $$$$$:   67-block 11
    $$$$$:   67-block 12
        2:   68:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   68-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   68-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   68-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   68-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   68-block  4
    $$$$$:   68-block  5
    $$$$$:   68-block  6
    $$$$$:   68-block  7
    $$$$$:   68-block  8
    $$$$$:   68-block  9
    $$$$$:   68-block 10
    $$$$$:   68-block 11
        1:   69:    std::vector<Car> cars;
call    0 returned 1
        1:   70:    cars.push_back(car1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   71:    cars.push_back(car2);
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   72:
        -:   73:    // Act
        2:   74:    std::vector<Car> actual = sortCarsByType(cars, "DESC");
        1:   74-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   74-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   74-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$:   74-block  3
    $$$$$:   74-block  4
    $$$$$:   74-block  5
        -:   75:
        -:   76:    // Assert
       1*:   77:    assert(actual.at(0).getRegistrationNumber() == car2.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   77-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   77-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   77-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:   77-block  3
call   12 never executed
        1:   77-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:   77-block  5
call   15 never executed
    $$$$$:   77-block  6
       1*:   78:    assert(actual.at(1).getRegistrationNumber() == car1.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   78-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   78-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   78-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:   78-block  3
call   12 never executed
        1:   78-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:   78-block  5
call   15 never executed
    $$$$$:   78-block  6
        1:   79:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$:   79-block  0
call    4 never executed
    $$$$$:   79-block  1
call    5 never executed
    $$$$$:   79-block  2
call    6 never executed
    $$$$$:   79-block  3
call    7 never executed
        -:   80:
function _ZN21SortingFunctionsTests32testSortCarsByRegistrationNumberEv called 1 returned 100% blocks executed 47%
        1:   81:void SortingFunctionsTests::testSortCarsByRegistrationNumber() {
        -:   82:    // Arrange
        2:   83:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:   83-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   83-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   83-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   83-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   83-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   83-block  5
    $$$$$:   83-block  6
    $$$$$:   83-block  7
    $$$$$:   83-block  8
    $$$$$:   83-block  9
    $$$$$:   83-block 10
    $$$$$:   83-block 11
    $$$$$:   83-block 12
        2:   84:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   84-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   84-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   84-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   84-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   84-block  4
    $$$$$:   84-block  5
    $$$$$:   84-block  6
    $$$$$:   84-block  7
    $$$$$:   84-block  8
    $$$$$:   84-block  9
    $$$$$:   84-block 10
    $$$$$:   84-block 11
        1:   85:    std::vector<Car> cars;
call    0 returned 1
        1:   86:    cars.push_back(car1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   87:    cars.push_back(car2);
        1:   87-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   88:
        -:   89:    // Act
        2:   90:    std::vector<Car> actual = sortCarsByRegistrationNumber(cars, "DESC");
        1:   90-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   90-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   90-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$:   90-block  3
    $$$$$:   90-block  4
    $$$$$:   90-block  5
        -:   91:
        -:   92:    // Assert
       1*:   93:    assert(actual.at(0).getRegistrationNumber() == car2.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   93-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   93-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:   93-block  3
call   12 never executed
        1:   93-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:   93-block  5
call   15 never executed
    $$$$$:   93-block  6
       1*:   94:    assert(actual.at(1).getRegistrationNumber() == car1.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   94-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   94-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   94-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:   94-block  3
call   12 never executed
        1:   94-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:   94-block  5
call   15 never executed
    $$$$$:   94-block  6
        1:   95:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$:   95-block  0
call    4 never executed
    $$$$$:   95-block  1
call    5 never executed
    $$$$$:   95-block  2
call    6 never executed
    $$$$$:   95-block  3
call    7 never executed
        -:   96:
function _ZN21SortingFunctionsTests30testSortCarsByProducerAndModelEv called 1 returned 100% blocks executed 47%
        1:   97:void SortingFunctionsTests::testSortCarsByProducerAndModel() {
        -:   98:    // Arrange
        2:   99:    Car car1 = Car("RO123AA", "Dacia", "A12", "Regular");
        1:   99-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   99-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   99-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   99-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   99-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   99-block  5
    $$$$$:   99-block  6
    $$$$$:   99-block  7
    $$$$$:   99-block  8
    $$$$$:   99-block  9
    $$$$$:   99-block 10
    $$$$$:   99-block 11
    $$$$$:   99-block 12
        2:  100:    Car car2 = Car("RO234AA", "Dacia", "A45", "Sports");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  100-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  100-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  100-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  100-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:  100-block  4
    $$$$$:  100-block  5
    $$$$$:  100-block  6
    $$$$$:  100-block  7
    $$$$$:  100-block  8
    $$$$$:  100-block  9
    $$$$$:  100-block 10
    $$$$$:  100-block 11
        2:  101:    Car car3 = Car("RO123GG", "Mercedes", "A45", "Regular");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  101-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  101-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  101-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  101-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:  101-block  4
    $$$$$:  101-block  5
    $$$$$:  101-block  6
    $$$$$:  101-block  7
    $$$$$:  101-block  8
    $$$$$:  101-block  9
    $$$$$:  101-block 10
    $$$$$:  101-block 11
        1:  102:    std::vector<Car> cars;
call    0 returned 1
        1:  103:    cars.push_back(car1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  104:    cars.push_back(car2);
        1:  104-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  105:    cars.push_back(car3);
        1:  105-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  106:    // Act
        2:  107:    std::vector<Car> actual = sortCarsByProducerAndModel(cars, "DESC");
        1:  107-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  107-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  107-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$:  107-block  3
    $$$$$:  107-block  4
    $$$$$:  107-block  5
        -:  108:
        -:  109:    // Assert
       1*:  110:    assert(actual.at(0).getRegistrationNumber() == car3.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  110-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  110-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  110-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  110-block  3
call   12 never executed
        1:  110-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:  110-block  5
call   15 never executed
    $$$$$:  110-block  6
       1*:  111:    assert(actual.at(1).getRegistrationNumber() == car2.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  111-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  111-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  111-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  111-block  3
call   12 never executed
        1:  111-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:  111-block  5
call   15 never executed
    $$$$$:  111-block  6
       1*:  112:    assert(actual.at(2).getRegistrationNumber() == car1.getRegistrationNumber());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  112-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  112-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  112-block  2
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  112-block  3
call   12 never executed
        1:  112-block  4
call   13 returned 1
call   14 returned 1
    $$$$$:  112-block  5
call   15 never executed
    $$$$$:  112-block  6
        1:  113:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
    $$$$$:  113-block  0
call    5 never executed
    $$$$$:  113-block  1
call    6 never executed
    $$$$$:  113-block  2
call    7 never executed
    $$$$$:  113-block  3
call    8 never executed
    $$$$$:  113-block  4
call    9 never executed
