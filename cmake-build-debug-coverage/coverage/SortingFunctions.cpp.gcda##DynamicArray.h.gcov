        -:    0:Source:/home/sebifp/ubb/cpplab/misc/DynamicArray.h
        -:    0:Graph:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/misc/SortingFunctions.cpp.gcno
        -:    0:Data:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/misc/SortingFunctions.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef CPPLAB_DYNAMICARRAY_H
        -:    2:#define CPPLAB_DYNAMICARRAY_H
        -:    3:
        -:    4:template <typename Element>
        -:    5:class DynamicArrayIterator;
        -:    6:
        -:    7:template <typename Element>
        -:    8:class DynamicArray
        -:    9:{
        -:   10:public:
        -:   11:	// Default constructor
        -:   12:	DynamicArray();
        -:   13:
        -:   14:	/*
        -:   15:	 * Copy constructor.
        -:   16:	 * Preconditions: arrayToBeCopied: an instance of the DynamicArray class.
        -:   17:	 * Post-conditions: -
        -:   18:	 */
        -:   19:	DynamicArray(const DynamicArray& arrayToBeCopied);
        -:   20:
        -:   21:	// Destructor
        -:   22:	~DynamicArray();
        -:   23:
        -:   24:	/*
        -:   25:	 * Assignment operator.
        -:   26:	 * Preconditions: arrayToBeAssigned: an instance of the DynamicArray class.
        -:   27:	 * Post-conditions: an instance of the DynamicArray class.
        -:   28:	 */
        -:   29:	DynamicArray& operator=(const DynamicArray& arrayToBeAssigned);
        -:   30:
        -:   31:    /*
        -:   32:     * Move constructor.
        -:   33:     * Preconditions: arrayToBeMoved: an instance of the DynamicArray class.
        -:   34:     * Post-conditions: -
        -:   35:     */
        -:   36:	DynamicArray(DynamicArray&& arrayToBeMoved);
        -:   37:
        -:   38:	/*
        -:   39:	 * Move assignment.
        -:   40:	 * Preconditions: arrayToBeMoved: an instance of the DynamicArray class.
        -:   41:	 * Post-conditions: an instance of the DynamicArray class.
        -:   42:	 */
        -:   43:	DynamicArray& operator=(DynamicArray&& arrayToBeMoved);
        -:   44:
        -:   45:    /*
        -:   46:     * Adds a new element in the array.
        -:   47:     * Preconditions: newElement: an Element
        -:   48:     * Post-conditions: -
        -:   49:     */
        -:   50:	void add(const Element& newElement);
        -:   51:
        -:   52:    /*
        -:   53:     * Returns the element at a given position.
        -:   54:     * Preconditions: position: a positive integer
        -:   55:     * Post-conditions: an Element
        -:   56:     */
        -:   57:	Element& get(int position) const;
        -:   58:
        -:   59:
        -:   60:    /*
        -:   61:     * Changes the value of the element at the given position to match the given value
        -:   62:     * Preconditions: position: a positive integer
        -:   63:     *                newValue: an Element
        -:   64:     * Post-conditions: -
        -:   65:     */
        -:   66:	void set(int position, const Element& newValue);
        -:   67:
        -:   68:    /*
        -:   69:     * Returns the size of the Array.
        -:   70:     * Preconditions: -
        -:   71:     * Post-conditions: an integer
        -:   72:     */
        -:   73:	int size() const noexcept;
        -:   74:
        -:   75:    /*
        -:   76:     * Deletes an element at the given position
        -:   77:     * Preconditions: position: a positive integer
        -:   78:     * Post-conditions: -
        -:   79:     */
        -:   80:    void erase(int position);
        -:   81:
        -:   82:	friend class DynamicArrayIterator<Element>;
        -:   83:
        -:   84:    /*
        -:   85:     * Returns a DynamicArrayIterator at the first position of the Array.
        -:   86:     * Preconditions: -
        -:   87:     * Post-conditions: DynamicArrayIterator
        -:   88:     */
        -:   89:	DynamicArrayIterator<Element> begin() const;
        -:   90:
        -:   91:    /*
        -:   92:     * Returns a DynamicArrayIterator at the last position of the Array.
        -:   93:     * Preconditions: -
        -:   94:     * Post-conditions: DynamicArrayIterator
        -:   95:     */
        -:   96:	DynamicArrayIterator<Element> end() const;
        -:   97:
        -:   98:
        -:   99:private:
        -:  100:	int length;
        -:  101:	int capacity;
        -:  102:	Element* elements;
        -:  103:
        -:  104:	void ensureCapacity();
        -:  105:};
        -:  106:
        -:  107:template<typename ElementT>
        -:  108:void DynamicArray<ElementT>::erase(int position) {
        -:  109:    for (int i = position; i < length - 1; ++i) {
        -:  110:        elements[i] = elements[i + 1];
        -:  111:    }
        -:  112:    length--;
        -:  113:}
        -:  114:
        -:  115:template<typename Element>
        -:  116:DynamicArray<Element>::DynamicArray() :elements{ new Element[2] }, capacity{ 2 }, length{ 0 } {}
        -:  117:
        -:  118:template<typename Element>
        -:  119:DynamicArray<Element>::DynamicArray(const DynamicArray<Element>& arrayToBeCopied) {
        -:  120:	elements = new Element[arrayToBeCopied.capacity];
        -:  121:
        -:  122:    // Copy the elements in the copy.
        -:  123:	for (int i = 0; i < arrayToBeCopied.length; i++) {
        -:  124:		elements[i] = arrayToBeCopied.elements[i];
        -:  125:	}
        -:  126:	length = arrayToBeCopied.length;
        -:  127:	capacity = arrayToBeCopied.capacity;
        -:  128:}
        -:  129:
        -:  130:template<typename Element>
        -:  131:DynamicArray<Element>& DynamicArray<Element>::operator=(const DynamicArray<Element>& arrayToBeAssigned) {
        -:  132:    // Create a new array and put the elements of the given on in it.
        -:  133:	delete[] elements;
        -:  134:	elements = new Element[arrayToBeAssigned.capacity];
        -:  135:	for (int i = 0; i < arrayToBeAssigned.length; i++) {
        -:  136:		elements[i] = arrayToBeAssigned.elements[i];
        -:  137:	}
        -:  138:	length = arrayToBeAssigned.length;
        -:  139:	capacity = arrayToBeAssigned.capacity;
        -:  140:	return *this;
        -:  141:}
        -:  142:
        -:  143:template<typename Element>
        -:  144:DynamicArray<Element>::~DynamicArray() {
        -:  145:	delete[] elements;
        -:  146:}
        -:  147:
        -:  148:template<typename Element>
function _ZN12DynamicArrayI3CarEC2EOS1_ called 4 returned 100% blocks executed 100%
        4:  149:DynamicArray<Element>::DynamicArray(DynamicArray&& arrayToBeMoved) {
        -:  150:	// Copy the data from the given array.
        4:  151:	elements = arrayToBeMoved.elements;
        4:  152:	length = arrayToBeMoved.length;
        4:  153:	capacity = arrayToBeMoved.capacity;
        -:  154:
        -:  155:	// Free the given array so the data doesn't get deleted twice.
        4:  156:	arrayToBeMoved.elements = nullptr;
        4:  157:	arrayToBeMoved.length = 0;
        4:  158:	arrayToBeMoved.capacity = 0;
        4:  159:}
        -:  160:
        -:  161:template<typename Element>
        -:  162:DynamicArray<Element>& DynamicArray<Element>::operator=(DynamicArray<Element>&& arrayToBeMoved) {
        -:  163:	// Check if to given array is the same as the current one.
        -:  164:	if (this == &arrayToBeMoved) {
        -:  165:		return *this;
        -:  166:	}
        -:  167:	delete[] elements;
        -:  168:	// Copy the data from the given array to the current one
        -:  169:	elements = arrayToBeMoved.elements;
        -:  170:	length = arrayToBeMoved.length;
        -:  171:	capacity = arrayToBeMoved.capacity;
        -:  172:
        -:  173:	// Free the data from the given array so the data isn't deleted twice
        -:  174:	arrayToBeMoved.elements = nullptr;
        -:  175:	arrayToBeMoved.length = 0;
        -:  176:	arrayToBeMoved.capacity = 0;
        -:  177:	return *this;
        -:  178:}
        -:  179:
        -:  180:template<typename Element>
        -:  181:void DynamicArray<Element>::add(const Element& newElement) {
        -:  182:	ensureCapacity();
        -:  183:	elements[length++] = newElement;
        -:  184:}
        -:  185:
        -:  186:template<typename Element>
function _ZNK12DynamicArrayI3CarE3getEi called 0 returned 0% blocks executed 0%
    #####:  187:Element& DynamicArray<Element>::get(int position) const {
    #####:  188:	return elements[position];
    %%%%%:  188-block  0
        -:  189:}
        -:  190:
        -:  191:template<typename Element>
function _ZN12DynamicArrayI3CarE3setEiRKS0_ called 19 returned 100% blocks executed 100%
       19:  192:void DynamicArray<Element>::set(int position, const Element& newValue) {
       19:  193:	elements[position] = newValue;
       19:  193-block  0
call    0 returned 19
       19:  194:}
        -:  195:
        -:  196:template<typename Element>
function _ZNK12DynamicArrayI3CarE4sizeEv called 0 returned 0% blocks executed 0%
    #####:  197:int DynamicArray<Element>::size() const noexcept {
    #####:  198:	return length;
    %%%%%:  198-block  0
        -:  199:}
        -:  200:
        -:  201:template<typename Element>
        -:  202:void DynamicArray<Element>::ensureCapacity() {
        -:  203:	// Check if there is enough space for a new element
        -:  204:	if (length < capacity) {
        -:  205:		return;
        -:  206:	}
        -:  207:
        -:  208:	// increase the space if it isn't the case
        -:  209:	capacity *= 2;
        -:  210:	Element* aux = new Element[capacity];
        -:  211:	for (int i = 0; i < length; i++) {
        -:  212:		aux[i] = elements[i];
        -:  213:	}
        -:  214:	delete[] elements;
        -:  215:	elements = aux;
        -:  216:}
        -:  217:
        -:  218:template<typename Element>
        -:  219:DynamicArrayIterator<Element> DynamicArray<Element>::begin() const
        -:  220:{
        -:  221:	return DynamicArrayIterator<Element>(*this);
        -:  222:}
        -:  223:
        -:  224:template<typename Element>
        -:  225:DynamicArrayIterator<Element> DynamicArray<Element>::end() const
        -:  226:{
        -:  227:	return DynamicArrayIterator<Element>(*this, length);
        -:  228:}
        -:  229:
        -:  230:template<typename Element>
        -:  231:class DynamicArrayIterator {
        -:  232:private:
        -:  233:	const DynamicArray<Element>& array;
        -:  234:	int position = 0;
        -:  235:public:
        -:  236:	/*
        -:  237:	 * Constructor of the DynamicArrayIterator.
        -:  238:	 * Preconditions: array: a reference to an instance of the DynamicArray class.
        -:  239:	 * Post-conditions: -
        -:  240:	 */
        -:  241:	DynamicArrayIterator(const DynamicArray<Element>& array) noexcept;
        -:  242:
        -:  243:	/*
        -:  244:	 * Constructor of the DynamicArrayIterator.
        -:  245:	 * Preconditions: array: a reference to an instance of the DynamicArray class. 
        -:  246:	 * 				  position: a positive integer
        -:  247:	 * Post-conditions: -
        -:  248:	 */
        -:  249:	DynamicArrayIterator(const DynamicArray<Element>& array, int position)noexcept;
        -:  250:
        -:  251:	/*
        -:  252:	 * Checks if the iterator is on a valid position.
        -:  253:	 * Preconditions: -
        -:  254:	 * Post-conditions: a boolean
        -:  255:	 */
        -:  256:	bool valid()const;
        -:  257:
        -:  258:	/*
        -:  259:	 * Returns the element at the position the iterator is at.
        -:  260:	 * Preconditions: -
        -:  261:	 * Post-conditions: an Element
        -:  262:	 */
        -:  263:	Element& element() const;
        -:  264:
        -:  265:    /*
        -:  266:     * Moves the iterator one position forward.
        -:  267:     * Preconditions: -
        -:  268:     * Post-conditions: -
        -:  269:     */
        -:  270:	void next();
        -:  271:
        -:  272:    /*
        -:  273:     * Returns the element the iterator is currently pointing at.
        -:  274:     * Preconditions: -
        -:  275:     * Post-conditions: an Element
        -:  276:     */
        -:  277:	Element& operator*();
        -:  278:
        -:  279:    /*
        -:  280:     * Moves the iterator one position forward.
        -:  281:     * Preconditions: -
        -:  282:     * Post-conditions: -
        -:  283:     */
        -:  284:	DynamicArrayIterator& operator++();
        -:  285:
        -:  286:    /*
        -:  287:     * Checks if two iterators are at the same position.
        -:  288:     * Preconditions: anotherDynamicArrayIterator: an instance of the DynamicArrayIterator class.
        -:  289:     * Post-conditions: a boolean
        -:  290:     */
        -:  291:	bool operator==(const DynamicArrayIterator& anotherDynamicArrayIterator)noexcept;
        -:  292:
        -:  293:    /*
        -:  294:     * Checks if two iterators are on different positions.
        -:  295:     * Preconditions: anotherDynamicArrayIterator: an instance of the DynamicArrayIterator class.
        -:  296:     * Post-conditions: a boolean.
        -:  297:     */
        -:  298:	bool operator!=(const DynamicArrayIterator& anotherDynamicArrayIterator)noexcept;
        -:  299:};
        -:  300:
        -:  301:template<typename Element>
        -:  302:DynamicArrayIterator<Element>::DynamicArrayIterator(const DynamicArray<Element>& v) noexcept:array{ v } {}
        -:  303:
        -:  304:template<typename Element>
        -:  305:DynamicArrayIterator<Element>::DynamicArrayIterator(const DynamicArray<Element>& array, int position)noexcept :
        -:  306:array{ array }, position{ position } {}
        -:  307:
        -:  308:template<typename Element>
        -:  309:bool DynamicArrayIterator<Element>::valid()const {
        -:  310:	return position < array.length;
        -:  311:}
        -:  312:
        -:  313:template<typename Element>
        -:  314:Element& DynamicArrayIterator<Element>::element() const {
        -:  315:	return array.elements[position];
        -:  316:}
        -:  317:
        -:  318:template<typename Element>
        -:  319:void DynamicArrayIterator<Element>::next() {
        -:  320:	position++;
        -:  321:}
        -:  322:
        -:  323:template<typename Element>
        -:  324:Element& DynamicArrayIterator<Element>::operator*() {
        -:  325:	return element();
        -:  326:}
        -:  327:
        -:  328:template<typename Element>
        -:  329:DynamicArrayIterator<Element>& DynamicArrayIterator<Element>::operator++() {
        -:  330:	next();
        -:  331:	return *this;
        -:  332:}
        -:  333:
        -:  334:template<typename Element>
        -:  335:bool DynamicArrayIterator<Element>::operator==(const DynamicArrayIterator<Element>& anotherDynamicArrayIterator) noexcept {
        -:  336:	return position == anotherDynamicArrayIterator.position;
        -:  337:}
        -:  338:
        -:  339:template<typename Element>
        -:  340:bool DynamicArrayIterator<Element>::operator!=(const DynamicArrayIterator<Element>& anotherDynamicArrayIterator)noexcept {
        -:  341:	return !(*this == anotherDynamicArrayIterator);
        -:  342:}
        -:  343:
        -:  344:#endif //CPPLAB_DYNAMICARRAY_H
