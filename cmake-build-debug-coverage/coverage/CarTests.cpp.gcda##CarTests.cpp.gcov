        -:    0:Source:/home/sebifp/devStuff/repos/OOP-CPP/test/CarTests.cpp
        -:    0:Graph:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/CarTests.cpp.gcno
        -:    0:Data:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/CarTests.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <cassert>
        -:    2:#include "CarTests.h"
        -:    3:#include "../domain/Car.h"
        -:    4:
function _ZN8CarTests15testConstructorEv called 1 returned 100% blocks executed 67%
        1:    5:void CarTests::testConstructor() {
        -:    6:    // check if the constructor doesn't break when it receives valid data
        -:    7:    try {
        2:    8:        Car car = Car("RO567AA", "ASFB", "AERT", "AFGHJ");
        1:    8-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    8-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    8-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    8-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    8-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:    8-block  5
    $$$$$:    8-block  6
    $$$$$:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
    $$$$$:    8-block 10
    $$$$$:    8-block 11
    $$$$$:    8-block 12
        1:    9:    } catch (...) {
call    0 returned 1
    $$$$$:    9-block  0
    $$$$$:    9-block  1
call    1 never executed
    =====:   10:        assert(false == true);
call    0 never executed
        -:   11:    }
        -:   12:
        -:   13:    // check if the constructor breaks when it receives empty fields
        -:   14:    try {
       9*:   15:        Car car = Car("", "", "", "");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   15-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   15-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   15-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   15-block  3
call   16 returned 1
branch 17 taken 0 (fallthrough)
branch 18 taken 1 (throw)
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        1:   15-block  4
        1:   15-block  5
        1:   15-block  6
        1:   15-block  7
        1:   15-block  8
        1:   15-block  9
        1:   15-block 10
        1:   15-block 11
    #####:   16:        assert(true == false);
call    0 never executed
        1:   17:    } catch (...) {
        1:   17-block  0
        1:   17-block  1
call    0 returned 1
        -:   18:        assert(true == true);
        1:   19:    }
call    0 returned 1
        -:   20:
        -:   21:    // check if the constructor breaks when it receives an invalid registrationNumber
        -:   22:    try {
        9:   23:        Car car = Car("RO56AS", "ASDF", "asdgf", "fdg");
        1:   23-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   23-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   23-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   23-block  3
call   12 returned 1
branch 13 taken 0 (fallthrough)
branch 14 taken 1 (throw)
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:   23-block  4
        1:   23-block  5
        1:   23-block  6
        1:   23-block  7
        1:   23-block  8
        1:   23-block  9
        1:   23-block 10
        1:   23-block 11
    =====:   24:        assert(false == true);
call    0 never executed
        1:   25:    } catch (...) {
        1:   25-block  0
        1:   25-block  1
call    0 returned 1
        -:   26:        assert(true == true);
        1:   27:    }
call    0 returned 1
        1:   28:}
        -:   29:
function _ZN8CarTests11testGettersEv called 1 returned 100% blocks executed 53%
        1:   30:void CarTests::testGetters() {
        -:   31:    // Arrange
        1:   32:    const std::string registrationNumber = "RO124AE";
        1:   32-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   32-block  1
        1:   33:    const std::string type = "ASDF";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   33-block  0
        1:   34:    const std::string model = "QWER";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   34-block  0
        1:   35:    const std::string producer = "QWERR";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   35-block  0
        1:   36:    Car car = Car(registrationNumber, producer, model, type);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   37:
        -:   38:    // Act
        1:   39:    const std::string actual1 = car.getRegistrationNumber();
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40:    const std::string actual2 = car.getProducer();
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41:    const std::string actual3 = car.getType();
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   42:    const std::string actual4 = car.getModel();
        1:   42-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   43:
        -:   44:    // Assert
       1*:   45:    assert(actual1 == registrationNumber);
        1:   45-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   45-block  1
call    3 never executed
       1*:   46:    assert(actual2 == producer);
        1:   46-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   46-block  1
call    3 never executed
       1*:   47:    assert(actual3 == type);
        1:   47-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   47-block  1
call    3 never executed
       1*:   48:    assert(actual4 == model);
        1:   48-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   48-block  1
call    3 never executed
        1:   49:}
        1:   49-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:   49-block  1
call    9 never executed
    $$$$$:   49-block  2
call   10 never executed
    $$$$$:   49-block  3
call   11 never executed
    $$$$$:   49-block  4
call   12 never executed
    $$$$$:   49-block  5
call   13 never executed
    $$$$$:   49-block  6
call   14 never executed
    $$$$$:   49-block  7
call   15 never executed
    $$$$$:   49-block  8
call   16 never executed
        -:   50:
function _ZN8CarTests11testSettersEv called 1 returned 100% blocks executed 54%
        1:   51:void CarTests::testSetters() {
        -:   52:    // Arrange
        1:   53:    const std::string validRegistrationNumber = "RO124AE";
        1:   53-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   53-block  1
        1:   54:    const std::string validType = "ASDF";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   54-block  0
        1:   55:    const std::string validModel = "QWER";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   55-block  0
        1:   56:    const std::string validProducer = "QWERR";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   56-block  0
        1:   57:    const std::string invalidRegistrationNumber = "";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   57-block  0
        1:   58:    const std::string invalidType = "";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   58-block  0
        1:   59:    const std::string invalidModel = "";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   59-block  0
        1:   60:    const std::string invalidProducer = "";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   60-block  0
        2:   61:    Car car = Car("RO345AA", "AAAA", "AAAA", "AAAA");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   61-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   61-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   61-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   61-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   61-block  4
    $$$$$:   61-block  5
    $$$$$:   61-block  6
    $$$$$:   61-block  7
    $$$$$:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
    $$$$$:   61-block 11
        -:   62:
        -:   63:    // Act
        -:   64:    // try setting invalid data
        -:   65:    try {
        1:   66:        car.setRegistrationNumber(invalidRegistrationNumber);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
    #####:   67:        assert(false == true);
    %%%%%:   67-block  0
call    0 never executed
        1:   68:    } catch (...) {
        1:   68-block  0
        1:   68-block  1
call    0 returned 1
        -:   69:        assert(true == true);
        1:   70:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   71:
        -:   72:    try {
        1:   73:        car.setModel(invalidModel);
        1:   73-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
    =====:   74:        assert(false == true);
    $$$$$:   74-block  0
call    0 never executed
        1:   75:    } catch (...) {
        1:   75-block  0
        1:   75-block  1
call    0 returned 1
        -:   76:        assert(true == true);
        1:   77:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   78:
        -:   79:    try {
        1:   80:        car.setType(invalidType);
        1:   80-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
    =====:   81:        assert(false == true);
    $$$$$:   81-block  0
call    0 never executed
        1:   82:    } catch (...) {
        1:   82-block  0
        1:   82-block  1
call    0 returned 1
        -:   83:        assert(true == true);
        1:   84:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   85:
        -:   86:    try {
        1:   87:        car.setProducer(invalidProducer);
        1:   87-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
    =====:   88:        assert(true == false);
    $$$$$:   88-block  0
call    0 never executed
        1:   89:    } catch (...) {
        1:   89-block  0
        1:   89-block  1
call    0 returned 1
        -:   90:        assert(true == true);
        1:   91:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   92:
        -:   93:    // set valid data
        1:   94:    car.setRegistrationNumber(validRegistrationNumber);
        1:   94-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   95:    car.setProducer(validProducer);
        1:   95-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   96:    car.setType(validType);
        1:   96-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   97:    car.setModel(validModel);
        1:   97-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   98:
        -:   99:    // Assert
        1:  100:    assert(car.getRegistrationNumber() == validRegistrationNumber);
        1:  100-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  100-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    $$$$$:  100-block  2
call    6 never executed
        1:  100-block  3
call    7 returned 1
        1:  101:    assert(car.getProducer() == validProducer);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  101-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    $$$$$:  101-block  1
call    6 never executed
        1:  101-block  2
call    7 returned 1
        1:  102:    assert(car.getModel() == validModel);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  102-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    $$$$$:  102-block  1
call    6 never executed
        1:  102-block  2
call    7 returned 1
        1:  103:    assert(car.getType() == validType);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  103-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    $$$$$:  103-block  1
call    6 never executed
        1:  103-block  2
call    7 returned 1
        1:  104:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:  104-block  0
call    9 never executed
    $$$$$:  104-block  1
call   10 never executed
    $$$$$:  104-block  2
call   11 never executed
    $$$$$:  104-block  3
call   12 never executed
    $$$$$:  104-block  4
call   13 never executed
    $$$$$:  104-block  5
call   14 never executed
    $$$$$:  104-block  6
call   15 never executed
    $$$$$:  104-block  7
call   16 never executed
    $$$$$:  104-block  8
call   17 never executed
        -:  105:
function _ZN8CarTests12testEqualityEv called 1 returned 100% blocks executed 43%
        1:  106:void CarTests::testEquality() {
        -:  107:    // Arrage
        2:  108:    Car car1 = Car("RO123AA", "AAA", "AAA", "AAA");
        1:  108-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  108-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  108-block  2
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  108-block  3
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  108-block  4
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:  108-block  5
    $$$$$:  108-block  6
    $$$$$:  108-block  7
    $$$$$:  108-block  8
    $$$$$:  108-block  9
    $$$$$:  108-block 10
    $$$$$:  108-block 11
    $$$$$:  108-block 12
        2:  109:    Car car2 = Car("RO123AA", "AAA", "AAA", "AAA");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  109-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  109-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  109-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  109-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:  109-block  4
    $$$$$:  109-block  5
    $$$$$:  109-block  6
    $$$$$:  109-block  7
    $$$$$:  109-block  8
    $$$$$:  109-block  9
    $$$$$:  109-block 10
    $$$$$:  109-block 11
        2:  110:    Car car3 = Car("RO122AA", "AAA", "AAA", "AAA");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  110-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  110-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  110-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:  110-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:  110-block  4
    $$$$$:  110-block  5
    $$$$$:  110-block  6
    $$$$$:  110-block  7
    $$$$$:  110-block  8
    $$$$$:  110-block  9
    $$$$$:  110-block 10
    $$$$$:  110-block 11
        -:  111:
        -:  112:    // Act
        1:  113:    const bool actual1 = car1.compareCars(car2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  113-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  113-block  1
call    6 returned 1
    $$$$$:  113-block  2
call    7 never executed
    $$$$$:  113-block  3
        1:  114:    const bool actual2 = car1.compareCars(car3);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  114-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  114-block  1
call    6 returned 1
    $$$$$:  114-block  2
call    7 never executed
    $$$$$:  114-block  3
        -:  115:
        -:  116:    // Assert
       1*:  117:    assert(actual1 == true);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  117-block  0
call    2 never executed
       1*:  118:    assert(actual2 == false);
        1:  118-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  118-block  1
call    2 never executed
        1:  119:}
        1:  119-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  119-block  1
call    3 never executed
    $$$$$:  119-block  2
call    4 never executed
    $$$$$:  119-block  3
call    5 never executed
