        -:    0:Source:/home/sebifp/devStuff/repos/OOP-CPP/controller/CarController.cpp
        -:    0:Graph:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/controller/CarController.cpp.gcno
        -:    0:Data:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/controller/CarController.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "CarController.h"
        -:    2:#include "../domain/TypeDTO.h"
        -:    3:
        -:    4:#include <utility>
        -:    5:
function _ZN13CarControllerC2ER13CarRepository called 9 returned 100% blocks executed 100%
        9:    6:CarController::CarController(CarRepository& carRepository): carRepository(carRepository) {}
        -:    7:
function _ZN13CarController9addNewCarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_ called 29 returned 97% blocks executed 100%
       29:    8:void CarController::addNewCar(
        -:    9:        const std::string& registrationNumber,
        -:   10:        const std::string& type,
        -:   11:        const std::string& model,
        -:   12:        const std::string& producer
        -:   13:        ) {
        -:   14:    // create new car object and try to add it in the repository
       29:   15:    Car newCar = Car(registrationNumber, producer, model, type);
       29:   15-block  0
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
       29:   16:    carRepository.addNewCar(newCar);
       29:   16-block  0
call    0 returned 29
branch  1 taken 28 (fallthrough)
branch  2 taken 1 (throw)
       29:   17:}
       28:   17-block  0
call    0 returned 28
        1:   17-block  1
call    1 returned 1
        -:   18:
function _ZN13CarController27findCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 67% blocks executed 100%
        9:   19:Car CarController::findCarByRegistrationNumber(const std::string& registrationNumber) {
        -:   20:    // return the car with the given registrationNumber or throw an error
        9:   21:    return this->carRepository.getCarByRegistrationNumber(registrationNumber);
        9:   21-block  0
call    0 returned 6
        -:   22:}
        -:   23:
function _ZN13CarController10getAllCarsEv called 2 returned 100% blocks executed 100%
        2:   24:const std::vector<Car>& CarController::getAllCars() {
        2:   25:    return this->carRepository.getAllCars();
        2:   25-block  0
call    0 returned 2
        -:   26:}
        -:   27:
function _ZN13CarController29deleteCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 50% blocks executed 100%
        2:   28:void CarController::deleteCarByRegistrationNumber(const std::string& registrationNumber) {
        -:   29:    // deletes the car with the given registrationNumber or throw an error if there is no car with the given registrationNumber
        2:   30:    this->carRepository.deleteCarByRegistrationNumber(registrationNumber);
        2:   30-block  0
call    0 returned 1
        1:   31:}
        -:   32:
function _ZN13CarController29updateCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_S7_ called 3 returned 33% blocks executed 100%
        3:   33:void CarController::updateCarByRegistrationNumber(const std::string& registrationNumber, const std::string& newRegistrationNumber, const std::string& type, const std::string& model, const std::string& producer) {
        -:   34:    // Create the updated car
        3:   35:    Car updatedCar = Car(newRegistrationNumber, producer, model, type);
        3:   35-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   36:    // Updates the car
        5:   37:    this->carRepository.updateCarByRegistrationNumber(registrationNumber, updatedCar);
        3:   37-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   37-block  1
call    3 returned 3
branch  4 taken 1 (fallthrough)
branch  5 taken 2 (throw)
        1:   37-block  2
call    6 returned 1
        2:   37-block  3
call    7 returned 2
        2:   37-block  4
        3:   38:}
call    0 returned 1
        2:   38-block  0
call    1 returned 2
        -:   39:
function _ZN13CarController6filterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFSt6vectorI3CarSaIS7_EERKS9_RKS5_E called 1 returned 100% blocks executed 100%
        1:   40:std::vector<Car> CarController::filter(std::string toEqual,std::vector<Car> (*filterByCriteria)(const std::vector<Car>&,const std::string&)) {
        1:   41:    return filterByCriteria(carRepository.getAllCars(), toEqual);
        1:   41-block  0
call    0 returned 1
call    1 returned 1
        -:   42:}
        -:   43:
        -:   44:std::vector<Car>
function _ZN13CarController4sortERKSt6vectorI3CarSaIS1_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFS3_S3_SD_E called 1 returned 100% blocks executed 75%
        1:   45:CarController::sort(const std::vector<Car> & cars, const std::string& sortingOrder, std::vector<Car> (*sortByCriteria)(std::vector<Car>, const std::string&)) {
        1:   46:    return sortByCriteria(cars, sortingOrder);
        1:   46-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   46-block  1
call    4 returned 1
        1:   46-block  2
    $$$$$:   46-block  3
call    5 never executed
        -:   47:}
        -:   48:
function _ZN13CarController16createTypeReportB5cxx11Ev called 1 returned 100% blocks executed 63%
        1:   49:std::unordered_map<std::string, TypeDTO> CarController::createTypeReport() {
        -:   50:    // Use a map to store the types of cars and their frequency
        1:   51:    std::unordered_map<std::string, int> typeReportWithoutDTO;
        1:   51-block  0
call    0 returned 1
        5:   52:    for (auto car: carRepository.getAllCars()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  0
call    3 returned 1
call    4 returned 1
        4:   52-block  1
call    5 returned 4
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 4
        5:   52-block  2
call   10 returned 5
branch 11 taken 4
branch 12 taken 1 (fallthrough)
        4:   53:        typeReportWithoutDTO[car.getType()]++;
        4:   53-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   53-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:   53-block  2
call    6 returned 4
    $$$$$:   53-block  3
call    7 never executed
    $$$$$:   53-block  4
        4:   54:    }
call    0 returned 4
    $$$$$:   54-block  0
call    1 never executed
        -:   55:
        -:   56:    // Create a map with TypeDTOs
        1:   57:    std::unordered_map<std::string, TypeDTO> typeReportWithDTO;
        1:   57-block  0
call    0 returned 1
        4:   58:    for (auto pair: typeReportWithoutDTO) {
call    0 returned 1
call    1 returned 1
        3:   58-block  0
call    2 returned 3
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 3
        4:   58-block  1
call    7 returned 4
branch  8 taken 3
branch  9 taken 1 (fallthrough)
        3:   59:        typeReportWithDTO[pair.first] = TypeDTO(pair.first, pair.second);
        3:   59-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   59-block  1
call    3 returned 3
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:   59-block  2
call    7 returned 3
call    8 returned 3
call    9 returned 3
    $$$$$:   59-block  3
call   10 never executed
    $$$$$:   59-block  4
    $$$$$:   59-block  5
call   11 never executed
    $$$$$:   59-block  6
        -:   60:
        3:   61:    }
call    0 returned 3
    $$$$$:   61-block  0
call    1 never executed
        2:   62:    return typeReportWithDTO;
        1:   62-block  0
        1:   62-block  1
        1:   63:}
        1:   63-block  0
call    0 returned 1
    $$$$$:   63-block  1
call    1 never executed
    $$$$$:   63-block  2
call    2 never executed
        -:   64:
        -:   65:
