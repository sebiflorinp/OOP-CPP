        -:    0:Source:/home/sebifp/ubb/cpplab/controller/CarController.cpp
        -:    0:Graph:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/controller/CarController.cpp.gcno
        -:    0:Data:/home/sebifp/ubb/cpplab/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/controller/CarController.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "CarController.h"
        -:    2:
        -:    3:#include <utility>
        -:    4:
function _ZN13CarControllerC2ERK13CarRepository called 8 returned 100% blocks executed 80%
        8:    5:CarController::CarController(const CarRepository& carRepository) {
        8:    5-block  0
call    0 returned 8
        8:    6:    this->carRepository = carRepository;
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:    7:}
        8:    7-block  0
    $$$$$:    7-block  1
call    0 never executed
        -:    8:
function _ZN13CarController9addNewCarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_ called 19 returned 95% blocks executed 100%
       19:    9:void CarController::addNewCar(
        -:   10:        const std::string& registrationNumber,
        -:   11:        const std::string& type,
        -:   12:        const std::string& model,
        -:   13:        const std::string& producer
        -:   14:        ) {
        -:   15:    // create new car object and try to add it in the repository
       19:   16:    Car newCar = Car(registrationNumber, producer, model, type);
       19:   16-block  0
call    0 returned 19
branch  1 taken 19 (fallthrough)
branch  2 taken 0 (throw)
       19:   17:    carRepository.addNewCar(newCar);
       19:   17-block  0
call    0 returned 19
branch  1 taken 18 (fallthrough)
branch  2 taken 1 (throw)
       19:   18:}
       18:   18-block  0
call    0 returned 18
        1:   18-block  1
call    1 returned 1
        -:   19:
function _ZN13CarController27findCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 67% blocks executed 100%
        9:   20:Car CarController::findCarByRegistrationNumber(const std::string& registrationNumber) {
        -:   21:    // return the car with the given registrationNumber or throw an error
        9:   22:    return this->carRepository.getCarByRegistrationNumber(registrationNumber);
        9:   22-block  0
call    0 returned 6
        -:   23:}
        -:   24:
function _ZN13CarController10getAllCarsEv called 2 returned 100% blocks executed 100%
        2:   25:const std::vector<Car>& CarController::getAllCars() {
        2:   26:    return this->carRepository.getAllCars();
        2:   26-block  0
call    0 returned 2
        -:   27:}
        -:   28:
function _ZN13CarController29deleteCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 50% blocks executed 100%
        2:   29:void CarController::deleteCarByRegistrationNumber(const std::string& registrationNumber) {
        -:   30:    // deletes the car with the given registrationNumber or throw an error if there is no car with the given registrationNumber
        2:   31:    this->carRepository.deleteCarByRegistrationNumber(registrationNumber);
        2:   31-block  0
call    0 returned 1
        1:   32:}
        -:   33:
function _ZN13CarController29updateCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_S7_ called 3 returned 33% blocks executed 100%
        3:   34:void CarController::updateCarByRegistrationNumber(const std::string& registrationNumber, const std::string& newRegistrationNumber, const std::string& type, const std::string& model, const std::string& producer) {
        -:   35:    // Create the updated car
        3:   36:    Car updatedCar = Car(newRegistrationNumber, producer, model, type);
        3:   36-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   37:    // Updates the car
        5:   38:    this->carRepository.updateCarByRegistrationNumber(registrationNumber, updatedCar);
        3:   38-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   38-block  1
call    3 returned 3
branch  4 taken 1 (fallthrough)
branch  5 taken 2 (throw)
        1:   38-block  2
call    6 returned 1
        2:   38-block  3
call    7 returned 2
        2:   38-block  4
        3:   39:}
call    0 returned 1
        2:   39-block  0
call    1 returned 2
        -:   40:
function _ZN13CarController6filterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFSt6vectorI3CarSaIS7_EERKS9_RKS5_E called 1 returned 100% blocks executed 100%
        1:   41:std::vector<Car> CarController::filter(std::string toEqual,std::vector<Car> (*filterByCriteria)(const std::vector<Car>&,const std::string&)) {
        1:   42:    return filterByCriteria(carRepository.getAllCars(), toEqual);
        1:   42-block  0
call    0 returned 1
call    1 returned 1
        -:   43:}
        -:   44:
        -:   45:std::vector<Car>
function _ZN13CarController4sortERKSt6vectorI3CarSaIS1_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFS3_S3_SD_E called 1 returned 100% blocks executed 75%
        1:   46:CarController::sort(const std::vector<Car> & cars, const std::string& sortingOrder, std::vector<Car> (*sortByCriteria)(std::vector<Car>, const std::string&)) {
        1:   47:    return sortByCriteria(cars, sortingOrder);
        1:   47-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   47-block  1
call    4 returned 1
        1:   47-block  2
    $$$$$:   47-block  3
call    5 never executed
        -:   48:}
        -:   49:
        -:   50:
