        -:    0:Source:/home/sebifp/devStuff/repos/OOP-CPP/repository/CarRepository.cpp
        -:    0:Graph:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/repository/CarRepository.cpp.gcno
        -:    0:Data:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/repository/CarRepository.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <algorithm>
        -:    2:#include "CarRepository.h"
        -:    3:#include "../misc/Exceptions.h"
function _ZN13CarRepository26getCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 49 returned 80% blocks executed 79%
       49:    4:Car CarRepository::getCarByRegistrationNumber(const std::string& registrationNumber) {
        -:    5:    // find the car with the received registration
function _ZZN13CarRepository26getCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK3CarE_clESA_ called 79 returned 100% blocks executed 100%
      128:    6:    auto result = std::find_if(cars.begin(), cars.end(), [&](const Car& car){return car.getRegistrationNumber() == registrationNumber;});
       49:    6-block  0
call    0 returned 49
call    1 returned 49
call    2 returned 49
branch  3 taken 49 (fallthrough)
branch  4 taken 0 (throw)
       79:    6-block  1
call    5 returned 79
call    6 returned 79
call    7 returned 79
       49:    7:    if (result == cars.end()) {
       49:    7-block  0
call    0 returned 49
call    1 returned 49
branch  2 taken 10 (fallthrough)
branch  3 taken 39
       10:    8:        throw CarNotFoundError("There is no car with the input registration number.");
       10:    8-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
       10:    8-block  1
call    5 returned 10
call    6 returned 10
call    7 returned 10
call    8 returned 10
    $$$$$:    8-block  2
call    9 never executed
    $$$$$:    8-block  3
    $$$$$:    8-block  4
call   10 never executed
        -:    9:    } else {
       78:   10:        return *result;
       39:   10-block  0
call    0 returned 39
call    1 returned 39
branch  2 taken 39 (fallthrough)
branch  3 taken 0 (throw)
       39:   10-block  1
        -:   11:    }
        -:   12:}
        -:   13:
function _ZNK13CarRepository10getAllCarsEv called 43 returned 100% blocks executed 100%
       43:   14:const std::vector<Car>& CarRepository::getAllCars() const {
       43:   15:    return cars;
       43:   15-block  0
        -:   16:}
        -:   17:
function _ZN13CarRepository9addNewCarERK3Car called 85 returned 96% blocks executed 77%
       85:   18:void CarRepository::addNewCar(const Car& newCar) {
        -:   19:    // check if there is already a Car with the registrationNumber of the received one.
function _ZZN13CarRepository9addNewCarERK3CarENKUlS2_E_clES2_ called 77 returned 100% blocks executed 80%
      162:   20:    auto result = std::find_if(cars.begin(), cars.end(), [&](const Car& car){return newCar.getRegistrationNumber() == car.getRegistrationNumber();});
       85:   20-block  0
call    0 returned 85
call    1 returned 85
call    2 returned 85
branch  3 taken 85 (fallthrough)
branch  4 taken 0 (throw)
       77:   20-block  1
call    5 returned 77
call    6 returned 77
branch  7 taken 77 (fallthrough)
branch  8 taken 0 (throw)
       77:   20-block  2
call    9 returned 77
call   10 returned 77
call   11 returned 77
       77:   20-block  3
    $$$$$:   20-block  4
call   12 never executed
       85:   21:    if (result == cars.end()) {
       85:   21-block  0
call    0 returned 85
call    1 returned 85
branch  2 taken 82 (fallthrough)
branch  3 taken 3
       82:   22:        cars.push_back(newCar);
       82:   22-block  0
call    0 returned 82
branch  1 taken 82 (fallthrough)
branch  2 taken 0 (throw)
       82:   23:        return;
       82:   23-block  0
       82:   23-block  1
        -:   24:    } else {
        3:   25:        throw DuplicateDataError("The is already a car with the input registration number");
        3:   25-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   25-block  1
call    5 returned 3
call    6 returned 3
call    7 returned 3
call    8 returned 3
    $$$$$:   25-block  2
call    9 never executed
    $$$$$:   25-block  3
    $$$$$:   25-block  4
call   10 never executed
        -:   26:    }
        -:   27:}
        -:   28:
function _ZN13CarRepository29deleteCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 92% blocks executed 75%
       12:   29:void CarRepository::deleteCarByRegistrationNumber(const std::string& registrationNumber) {
        -:   30:    // find the car that needs to be deleted
function _ZZN13CarRepository29deleteCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK3CarE_clESA_ called 17 returned 100% blocks executed 100%
       29:   31:    auto result = std::find_if(cars.begin(), cars.end(), [&](const Car& car){return car.getRegistrationNumber() == registrationNumber;});
       12:   31-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
       17:   31-block  1
call    5 returned 17
call    6 returned 17
call    7 returned 17
       12:   32:    if (result != cars.end()) {
       12:   32-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 11 (fallthrough)
branch  3 taken 1
       11:   33:        cars.erase(result);
       11:   33-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   33-block  1
       11:   34:        return ;
       11:   34-block  0
       11:   34-block  1
        -:   35:    } else {
        1:   36:        throw CarNotFoundError("The is no car with the input registration number");
        1:   36-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   36-block  1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:   36-block  2
call    9 never executed
    $$$$$:   36-block  3
    $$$$$:   36-block  4
call   10 never executed
        -:   37:    }
        -:   38:}
        -:   39:
function _ZN13CarRepository29updateCarByRegistrationNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE3Car called 7 returned 57% blocks executed 78%
        7:   40:void CarRepository::updateCarByRegistrationNumber(const std::string& registrationNumber, Car updatedCar) {
        -:   41:    // ensure that the update operation will not lead to multiple cars with the same registration number
        7:   42:    if (registrationNumber != updatedCar.getRegistrationNumber()) {
        7:   42-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0
       19:   43:        for (auto & car : cars) {
        7:   43-block  0
call    0 returned 7
call    1 returned 7
       14:   43-block  1
call    2 returned 14
       12:   43-block  2
call    3 returned 12
       19:   43-block  3
call    4 returned 19
branch  5 taken 14
branch  6 taken 5 (fallthrough)
       14:   44:            if (car.getRegistrationNumber() == updatedCar.getRegistrationNumber()) {
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14:   44-block  0
call    3 returned 14
branch  4 taken 14 (fallthrough)
branch  5 taken 0 (throw)
       14:   44-block  1
call    6 returned 14
call    7 returned 14
call    8 returned 14
branch  9 taken 2 (fallthrough)
branch 10 taken 12
    $$$$$:   44-block  2
call   11 never executed
    $$$$$:   44-block  3
        -:   45:                // throw an error because the update will create multiple cars with the same registration number
        2:   46:                throw DuplicateDataError("The update operation would create multiple cars with the same registration number.");
        2:   46-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   46-block  1
call    5 returned 2
call    6 returned 2
call    7 returned 2
call    8 returned 2
    $$$$$:   46-block  2
call    9 never executed
    $$$$$:   46-block  3
    $$$$$:   46-block  4
call   10 never executed
        -:   47:            }
        -:   48:        }
        -:   49:    }
        -:   50:    // find the car that will be updated
        7:   51:    for (auto & car : cars) {
        5:   51-block  0
call    0 returned 5
call    1 returned 5
        6:   51-block  1
call    2 returned 6
        2:   51-block  2
call    3 returned 2
        7:   51-block  3
call    4 returned 7
branch  5 taken 6
branch  6 taken 1 (fallthrough)
        6:   52:        if (car.getRegistrationNumber() == registrationNumber) {
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   52-block  0
call    3 returned 6
call    4 returned 6
branch  5 taken 4 (fallthrough)
branch  6 taken 2
        4:   53:            car = updatedCar;
        4:   53-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   54:            return;
        4:   54-block  0
        4:   54-block  1
        -:   55:        }
        -:   56:    }
        -:   57:
        -:   58:    // if no car was found throw an error
        1:   59:    throw  CarNotFoundError("There is not car with the input registration number.");
        1:   59-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   59-block  1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 0
    $$$$$:   59-block  2
call    9 never executed
    $$$$$:   59-block  3
    $$$$$:   59-block  4
call   10 never executed
        -:   60:}
        -:   61:
function _ZN13CarRepository15emptyRepositoryEv called 1 returned 100% blocks executed 100%
        1:   62:void CarRepository::emptyRepository() {
        1:   63:    cars.clear();
        1:   63-block  0
call    0 returned 1
        1:   64:}
