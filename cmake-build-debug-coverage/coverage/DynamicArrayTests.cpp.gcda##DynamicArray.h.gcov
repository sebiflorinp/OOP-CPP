        -:    0:Source:/home/sebifp/devStuff/repos/OOP-CPP/misc/DynamicArray.h
        -:    0:Graph:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/DynamicArrayTests.cpp.gcno
        -:    0:Data:/home/sebifp/devStuff/repos/OOP-CPP/cmake-build-debug-coverage/CMakeFiles/cpplab.dir/test/DynamicArrayTests.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef CPPLAB_DYNAMICARRAY_H
        -:    2:#define CPPLAB_DYNAMICARRAY_H
        -:    3:
        -:    4:template <typename Element>
        -:    5:class DynamicArrayIterator;
        -:    6:
        -:    7:template <typename Element>
        -:    8:class DynamicArray
        -:    9:{
        -:   10:private:
        -:   11:	int length;
        -:   12:	int capacity;
        -:   13:	Element* elements;
        -:   14:
        -:   15:	void ensureCapacity();
        -:   16:
        -:   17:public:
        -:   18:	// Default constructor
        -:   19:	DynamicArray();
        -:   20:
        -:   21:	/*
        -:   22:	 * Copy constructor.
        -:   23:	 * Preconditions: arrayToBeCopied: an instance of the DynamicArray class.
        -:   24:	 * Post-conditions: -
        -:   25:	 */
        -:   26:	DynamicArray(const DynamicArray& arrayToBeCopied);
        -:   27:
        -:   28:	// Destructor
        -:   29:	~DynamicArray();
        -:   30:
        -:   31:	/*
        -:   32:	 * Assignment operator.
        -:   33:	 * Preconditions: arrayToBeAssigned: an instance of the DynamicArray class.
        -:   34:	 * Post-conditions: an instance of the DynamicArray class.
        -:   35:	 */
        -:   36:	DynamicArray& operator=(const DynamicArray& arrayToBeAssigned);
        -:   37:
        -:   38:    /*
        -:   39:     * Move constructor.
        -:   40:     * Preconditions: arrayToBeMoved: an instance of the DynamicArray class.
        -:   41:     * Post-conditions: -
        -:   42:     */
        -:   43:	DynamicArray(DynamicArray&& arrayToBeMoved);
        -:   44:
        -:   45:	/*
        -:   46:	 * Move assignment.
        -:   47:	 * Preconditions: arrayToBeMoved: an instance of the DynamicArray class.
        -:   48:	 * Post-conditions: an instance of the DynamicArray class.
        -:   49:	 */
        -:   50:	DynamicArray& operator=(DynamicArray&& arrayToBeMoved);
        -:   51:
        -:   52:    /*
        -:   53:     * Adds a new element in the array.
        -:   54:     * Preconditions: newElement: an Element
        -:   55:     * Post-conditions: -
        -:   56:     */
        -:   57:	void add(const Element& newElement);
        -:   58:
        -:   59:    /*
        -:   60:     * Returns the element at a given position.
        -:   61:     * Preconditions: position: a positive integer
        -:   62:     * Post-conditions: an Element
        -:   63:     */
        -:   64:	Element& get(int position) const;
        -:   65:
        -:   66:
        -:   67:    /*
        -:   68:     * Changes the value of the element at the given position to match the given value
        -:   69:     * Preconditions: position: a positive integer
        -:   70:     *                newValue: an Element
        -:   71:     * Post-conditions: -
        -:   72:     */
        -:   73:	void set(int position, const Element& newValue);
        -:   74:
        -:   75:    /*
        -:   76:     * Returns the size of the Array.
        -:   77:     * Preconditions: -
        -:   78:     * Post-conditions: an integer
        -:   79:     */
        -:   80:	int size() const noexcept;
        -:   81:
        -:   82:    /*
        -:   83:     * Deletes an element at the given position
        -:   84:     * Preconditions: position: a positive integer
        -:   85:     * Post-conditions: -
        -:   86:     */
        -:   87:    void erase(int position);
        -:   88:
        -:   89:	friend class DynamicArrayIterator<Element>;
        -:   90:
        -:   91:    /*
        -:   92:     * Returns a DynamicArrayIterator at the first position of the Array.
        -:   93:     * Preconditions: -
        -:   94:     * Post-conditions: DynamicArrayIterator
        -:   95:     */
        -:   96:	DynamicArrayIterator<Element> begin() const;
        -:   97:
        -:   98:    /*
        -:   99:     * Returns a DynamicArrayIterator at the last position of the Array.
        -:  100:     * Preconditions: -
        -:  101:     * Post-conditions: DynamicArrayIterator
        -:  102:     */
        -:  103:	DynamicArrayIterator<Element> end() const;
        -:  104:};
        -:  105:
        -:  106:template<typename ElementT>
function _ZN12DynamicArrayI3CarE5eraseEi called 3 returned 100% blocks executed 100%
        3:  107:void DynamicArray<ElementT>::erase(int position) {
        6:  108:    for (int i = position; i < length - 1; ++i) {
        3:  108-block  0
        6:  108-block  1
branch  0 taken 3
branch  1 taken 3 (fallthrough)
        3:  109:        elements[i] = elements[i + 1];
        3:  109-block  0
call    0 returned 3
        -:  110:    }
        3:  111:    length--;
        3:  112:}
        -:  113:
        -:  114:template<typename Element>
function _ZN12DynamicArrayI3CarEC2Ev called 2 returned 100% blocks executed 54%
        6:  115:DynamicArray<Element>::DynamicArray() :elements{ new Element[2] }, capacity{ 2 }, length{ 0 } {}
        2:  115-block  0
call    0 returned 2
        4:  115-block  1
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  115-block  2
        6:  115-block  3
branch  4 taken 4
branch  5 taken 2 (fallthrough)
        2:  115-block  4
    $$$$$:  115-block  5
    $$$$$:  115-block  6
call    6 never executed
    $$$$$:  115-block  7
call    7 never executed
        -:  116:
        -:  117:template<typename Element>
        -:  118:DynamicArray<Element>::DynamicArray(const DynamicArray<Element>& arrayToBeCopied) {
        -:  119:	elements = new Element[arrayToBeCopied.capacity];
        -:  120:
        -:  121:    // Copy the elements in the copy.
        -:  122:	for (int i = 0; i < arrayToBeCopied.length; i++) {
        -:  123:		elements[i] = arrayToBeCopied.elements[i];
        -:  124:	}
        -:  125:	length = arrayToBeCopied.length;
        -:  126:	capacity = arrayToBeCopied.capacity;
        -:  127:}
        -:  128:
        -:  129:template<typename Element>
function _ZN12DynamicArrayI3CarEaSERKS1_ called 1 returned 100% blocks executed 66%
        1:  130:DynamicArray<Element>& DynamicArray<Element>::operator=(const DynamicArray<Element>& arrayToBeAssigned) {
        -:  131:    // Create a new array and put the elements of the given on in it.
        5:  132:	delete[] elements;
        1:  132-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  132-block  1
        5:  132-block  2
branch  2 taken 4 (fallthrough)
branch  3 taken 1
        4:  132-block  3
call    4 returned 4
        1:  132-block  4
call    5 returned 1
       5*:  133:	elements = new Element[arrayToBeAssigned.capacity];
        1:  133-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  133-block  1
    %%%%%:  133-block  2
        1:  133-block  3
call    2 returned 1
        4:  133-block  4
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:  133-block  5
        5:  133-block  6
branch  6 taken 4
branch  7 taken 1 (fallthrough)
    $$$$$:  133-block  7
    $$$$$:  133-block  8
call    8 never executed
    $$$$$:  133-block  9
branch  9 never executed
branch 10 never executed
    $$$$$:  133-block 10
    $$$$$:  133-block 11
    $$$$$:  133-block 12
call   11 never executed
        4:  134:	for (int i = 0; i < arrayToBeAssigned.length; i++) {
        1:  134-block  0
        4:  134-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:  135:		elements[i] = arrayToBeAssigned.elements[i];
        3:  135-block  0
call    0 returned 3
        -:  136:	}
        1:  137:	length = arrayToBeAssigned.length;
        1:  138:	capacity = arrayToBeAssigned.capacity;
        1:  139:	return *this;
        1:  139-block  0
        1:  139-block  1
        -:  140:}
        -:  141:
        -:  142:template<typename Element>
function _ZN12DynamicArrayI3CarED2Ev called 2 returned 100% blocks executed 100%
        2:  143:DynamicArray<Element>::~DynamicArray() {
       10:  144:	delete[] elements;
        2:  144-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  144-block  1
       10:  144-block  2
branch  2 taken 8 (fallthrough)
branch  3 taken 2
        8:  144-block  3
call    4 returned 8
        2:  144-block  4
call    5 returned 2
        2:  145:}
        -:  146:
        -:  147:template<typename Element>
        -:  148:DynamicArray<Element>::DynamicArray(DynamicArray&& arrayToBeMoved) {
        -:  149:	// Copy the data from the given array.
        -:  150:	elements = arrayToBeMoved.elements;
        -:  151:	length = arrayToBeMoved.length;
        -:  152:	capacity = arrayToBeMoved.capacity;
        -:  153:
        -:  154:	// Free the given array so the data doesn't get deleted twice.
        -:  155:	arrayToBeMoved.elements = nullptr;
        -:  156:	arrayToBeMoved.length = 0;
        -:  157:	arrayToBeMoved.capacity = 0;
        -:  158:}
        -:  159:
        -:  160:template<typename Element>
        -:  161:DynamicArray<Element>& DynamicArray<Element>::operator=(DynamicArray<Element>&& arrayToBeMoved) {
        -:  162:	// Check if to given array is the same as the current one.
        -:  163:	if (this == &arrayToBeMoved) {
        -:  164:		return *this;
        -:  165:	}
        -:  166:	delete[] elements;
        -:  167:	// Copy the data from the given array to the current one
        -:  168:	elements = arrayToBeMoved.elements;
        -:  169:	length = arrayToBeMoved.length;
        -:  170:	capacity = arrayToBeMoved.capacity;
        -:  171:
        -:  172:	// Free the data from the given array so the data isn't deleted twice
        -:  173:	arrayToBeMoved.elements = nullptr;
        -:  174:	arrayToBeMoved.length = 0;
        -:  175:	arrayToBeMoved.capacity = 0;
        -:  176:	return *this;
        -:  177:}
        -:  178:
        -:  179:template<typename Element>
function _ZN12DynamicArrayI3CarE3addERKS0_ called 7 returned 100% blocks executed 100%
        7:  180:void DynamicArray<Element>::add(const Element& newElement) {
        7:  181:	ensureCapacity();
        7:  181-block  0
call    0 returned 7
        7:  182:	elements[length++] = newElement;
call    0 returned 7
        7:  183:}
        -:  184:
        -:  185:template<typename Element>
function _ZNK12DynamicArrayI3CarE3getEi called 14 returned 100% blocks executed 100%
       14:  186:Element& DynamicArray<Element>::get(int position) const {
       14:  187:	return elements[position];
       14:  187-block  0
        -:  188:}
        -:  189:
        -:  190:template<typename Element>
function _ZN12DynamicArrayI3CarE3setEiRKS0_ called 3 returned 100% blocks executed 100%
        3:  191:void DynamicArray<Element>::set(int position, const Element& newValue) {
        3:  192:	elements[position] = newValue;
        3:  192-block  0
call    0 returned 3
        3:  193:}
        -:  194:
        -:  195:template<typename Element>
function _ZNK12DynamicArrayI3CarE4sizeEv called 8 returned 100% blocks executed 100%
        8:  196:int DynamicArray<Element>::size() const noexcept {
        8:  197:	return length;
        8:  197-block  0
        -:  198:}
        -:  199:
        -:  200:template<typename Element>
function _ZN12DynamicArrayI3CarE14ensureCapacityEv called 7 returned 100% blocks executed 68%
        7:  201:void DynamicArray<Element>::ensureCapacity() {
        -:  202:	// Check if there is enough space for a new element
        7:  203:	if (length < capacity) {
        7:  203-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 2
        5:  204:		return;
        5:  204-block  0
        -:  205:	}
        -:  206:
        -:  207:	// increase the space if it isn't the case
        2:  208:	capacity *= 2;
      10*:  209:	Element* aux = new Element[capacity];
        2:  209-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  209-block  1
    %%%%%:  209-block  2
        2:  209-block  3
call    2 returned 2
        8:  209-block  4
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:  209-block  5
       10:  209-block  6
branch  6 taken 8
branch  7 taken 2 (fallthrough)
    $$$$$:  209-block  7
    $$$$$:  209-block  8
call    8 never executed
    $$$$$:  209-block  9
branch  9 never executed
branch 10 never executed
    $$$$$:  209-block 10
    $$$$$:  209-block 11
    $$$$$:  209-block 12
call   11 never executed
        6:  210:	for (int i = 0; i < length; i++) {
        2:  210-block  0
        6:  210-block  1
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  211:		aux[i] = elements[i];
        4:  211-block  0
call    0 returned 4
        -:  212:	}
        6:  213:	delete[] elements;
        2:  213-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  213-block  1
        6:  213-block  2
branch  2 taken 4 (fallthrough)
branch  3 taken 2
        4:  213-block  3
call    4 returned 4
        2:  213-block  4
call    5 returned 2
        2:  214:	elements = aux;
        2:  214-block  0
        -:  215:}
        -:  216:
        -:  217:template<typename Element>
function _ZNK12DynamicArrayI3CarE5beginEv called 1 returned 100% blocks executed 100%
        1:  218:DynamicArrayIterator<Element> DynamicArray<Element>::begin() const
        -:  219:{
        1:  220:	return DynamicArrayIterator<Element>(*this);
        1:  220-block  0
call    0 returned 1
        -:  221:}
        -:  222:
        -:  223:template<typename Element>
function _ZNK12DynamicArrayI3CarE3endEv called 1 returned 100% blocks executed 100%
        1:  224:DynamicArrayIterator<Element> DynamicArray<Element>::end() const
        -:  225:{
        1:  226:	return DynamicArrayIterator<Element>(*this, length);
        1:  226-block  0
call    0 returned 1
        -:  227:}
        -:  228:
        -:  229:template<typename Element>
        -:  230:class DynamicArrayIterator {
        -:  231:private:
        -:  232:	const DynamicArray<Element>& array;
        -:  233:	int position = 0;
        -:  234:public:
        -:  235:	/*
        -:  236:	 * Constructor of the DynamicArrayIterator.
        -:  237:	 * Preconditions: array: a reference to an instance of the DynamicArray class.
        -:  238:	 * Post-conditions: -
        -:  239:	 */
        -:  240:	DynamicArrayIterator(const DynamicArray<Element>& array) noexcept;
        -:  241:
        -:  242:	/*
        -:  243:	 * Constructor of the DynamicArrayIterator.
        -:  244:	 * Preconditions: array: a reference to an instance of the DynamicArray class. 
        -:  245:	 * 				  position: a positive integer
        -:  246:	 * Post-conditions: -
        -:  247:	 */
        -:  248:	DynamicArrayIterator(const DynamicArray<Element>& array, int position)noexcept;
        -:  249:
        -:  250:	/*
        -:  251:	 * Checks if the iterator is on a valid position.
        -:  252:	 * Preconditions: -
        -:  253:	 * Post-conditions: a boolean
        -:  254:	 */
        -:  255:	bool valid()const;
        -:  256:
        -:  257:	/*
        -:  258:	 * Returns the element at the position the iterator is at.
        -:  259:	 * Preconditions: -
        -:  260:	 * Post-conditions: an Element
        -:  261:	 */
        -:  262:	Element& element() const;
        -:  263:
        -:  264:    /*
        -:  265:     * Moves the iterator one position forward.
        -:  266:     * Preconditions: -
        -:  267:     * Post-conditions: -
        -:  268:     */
        -:  269:	void next();
        -:  270:
        -:  271:    /*
        -:  272:     * Returns the element the iterator is currently pointing at.
        -:  273:     * Preconditions: -
        -:  274:     * Post-conditions: an Element
        -:  275:     */
        -:  276:	Element& operator*();
        -:  277:
        -:  278:    /*
        -:  279:     * Moves the iterator one position forward.
        -:  280:     * Preconditions: -
        -:  281:     * Post-conditions: -
        -:  282:     */
        -:  283:	DynamicArrayIterator& operator++();
        -:  284:
        -:  285:    /*
        -:  286:     * Checks if two iterators are at the same position.
        -:  287:     * Preconditions: anotherDynamicArrayIterator: an instance of the DynamicArrayIterator class.
        -:  288:     * Post-conditions: a boolean
        -:  289:     */
        -:  290:	bool operator==(const DynamicArrayIterator& anotherDynamicArrayIterator)noexcept;
        -:  291:
        -:  292:    /*
        -:  293:     * Checks if two iterators are on different positions.
        -:  294:     * Preconditions: anotherDynamicArrayIterator: an instance of the DynamicArrayIterator class.
        -:  295:     * Post-conditions: a boolean.
        -:  296:     */
        -:  297:	bool operator!=(const DynamicArrayIterator& anotherDynamicArrayIterator)noexcept;
        -:  298:};
        -:  299:
        -:  300:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarEC2ERK12DynamicArrayIS0_E called 1 returned 100% blocks executed 100%
        1:  301:DynamicArrayIterator<Element>::DynamicArrayIterator(const DynamicArray<Element>& v) noexcept:array{ v } {}
        -:  302:
        -:  303:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarEC2ERK12DynamicArrayIS0_Ei called 1 returned 100% blocks executed 100%
        1:  304:DynamicArrayIterator<Element>::DynamicArrayIterator(const DynamicArray<Element>& array, int position)noexcept :
        1:  305:array{ array }, position{ position } {}
        -:  306:
        -:  307:template<typename Element>
        -:  308:bool DynamicArrayIterator<Element>::valid()const {
        -:  309:	return position < array.length;
        -:  310:}
        -:  311:
        -:  312:template<typename Element>
function _ZNK20DynamicArrayIteratorI3CarE7elementEv called 3 returned 100% blocks executed 100%
        3:  313:Element& DynamicArrayIterator<Element>::element() const {
        3:  314:	return array.elements[position];
        3:  314-block  0
        -:  315:}
        -:  316:
        -:  317:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarE4nextEv called 3 returned 100% blocks executed 100%
        3:  318:void DynamicArrayIterator<Element>::next() {
        3:  319:	position++;
        3:  320:}
        -:  321:
        -:  322:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarEdeEv called 3 returned 100% blocks executed 100%
        3:  323:Element& DynamicArrayIterator<Element>::operator*() {
        3:  324:	return element();
        3:  324-block  0
call    0 returned 3
        -:  325:}
        -:  326:
        -:  327:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarEppEv called 3 returned 100% blocks executed 100%
        3:  328:DynamicArrayIterator<Element>& DynamicArrayIterator<Element>::operator++() {
        3:  329:	next();
        3:  329-block  0
call    0 returned 3
        3:  330:	return *this;
        -:  331:}
        -:  332:
        -:  333:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarEeqERKS1_ called 4 returned 100% blocks executed 100%
        4:  334:bool DynamicArrayIterator<Element>::operator==(const DynamicArrayIterator<Element>& anotherDynamicArrayIterator) noexcept {
        4:  335:	return position == anotherDynamicArrayIterator.position;
        4:  335-block  0
        -:  336:}
        -:  337:
        -:  338:template<typename Element>
function _ZN20DynamicArrayIteratorI3CarEneERKS1_ called 4 returned 100% blocks executed 100%
        4:  339:bool DynamicArrayIterator<Element>::operator!=(const DynamicArrayIterator<Element>& anotherDynamicArrayIterator)noexcept {
        4:  340:	return !(*this == anotherDynamicArrayIterator);
        4:  340-block  0
call    0 returned 4
        -:  341:}
        -:  342:
        -:  343:#endif //CPPLAB_DYNAMICARRAY_H
